[
  {
    "objectID": "articles/Beginning-a-project/SOLID.html",
    "href": "articles/Beginning-a-project/SOLID.html",
    "title": "Principles of SOLID",
    "section": "",
    "text": "SOLID is an acronym that represents five foundational design principles in object-oriented programming (OOP). These principles help create software that is more maintainable, extensible, and robust.\n\n\n\nSingle Responsibility Principle (SRP)\nOpen-Closed Principle (OCP)\nLiskov Substitution Principle (LSP)\nInterface Segregation Principle (ISP)\nDependency Inversion Principle (DIP)\nSummary\n\n\n\n\n\nDefinition\nA class should have one and only one reason to change.\n\n\npublic class Order\n{\n    // Properties (Id, Date, Total, etc.)\n}\n\npublic class OrderService\n{\n    public void CreateOrder(Order order)\n    {\n        // Logic to create an order\n    }\n\n    public void SendOrderConfirmationEmail(Order order)\n    {\n        // Logic to send email confirmation\n    }\n}\nIn this example, the OrderService class is handling both order creation and sending confirmation emails. These are two distinct responsibilities.\n\n\n\npublic class Order\n{\n    // Properties (Id, Date, Total, etc.)\n}\n\npublic class OrderService\n{\n    public void CreateOrder(Order order)\n    {\n        // Logic to create an order\n    }\n}\n\npublic class EmailService\n{\n    public void SendOrderConfirmationEmail(Order order)\n    {\n        // Logic to send email confirmation\n    }\n}\nNow, OrderService is responsible only for creating orders, while EmailService handles sending emails. Each class has a single responsibility.\n\n\n\n\n\nDefinition\nSoftware entities (classes, modules, functions, etc.) should be open for extension but closed for modification.\n\n\npublic class PaymentProcessor\n{\n    public void ProcessPayment(string paymentType)\n    {\n        if (paymentType == \"CreditCard\")\n        {\n            // Process credit card payment\n        }\n        else if (paymentType == \"PayPal\")\n        {\n            // Process PayPal payment\n        }\n        // If you add a new payment method, you have to modify this method again\n    }\n}\nHere, each time a new payment method is introduced, we must modify the ProcessPayment method—risking regressions and violating OCP.\n\n\n\npublic interface IPaymentMethod\n{\n    void Pay();\n}\n\npublic class CreditCardPayment : IPaymentMethod\n{\n    public void Pay()\n    {\n        // Logic to process credit card payment\n    }\n}\n\npublic class PayPalPayment : IPaymentMethod\n{\n    public void Pay()\n    {\n        // Logic to process PayPal payment\n    }\n}\n\npublic class PaymentProcessor\n{\n    public void ProcessPayment(IPaymentMethod paymentMethod)\n    {\n        paymentMethod.Pay();\n    }\n}\nPaymentProcessor now relies on an interface rather than concrete types. Adding a new payment method (e.g., GooglePayPayment) involves creating a new class that implements IPaymentMethod—no changes to PaymentProcessor are required.\n\n\n\n\n\nDefinition\nSubtypes should be substitutable for their base types without affecting the correctness of the program.\n\n\npublic class Bird\n{\n    public virtual void Fly()\n    {\n        // Default flying logic\n    }\n}\n\npublic class Ostrich : Bird\n{\n    public override void Fly()\n    {\n        // Ostriches can't fly, but this method is forced by inheritance\n        // This might throw an exception or do nothing, violating expectations\n        throw new NotSupportedException(\"Ostriches cannot fly!\");\n    }\n}\nA Bird is expected to fly, but an Ostrich cannot. Substituting Ostrich where a Bird is expected can break the system.\n\n\n\npublic interface IFlyable\n{\n    void Fly();\n}\n\npublic abstract class Bird\n{\n    // Common bird properties\n}\n\npublic class Eagle : Bird, IFlyable\n{\n    public void Fly()\n    {\n        // Eagle-specific flying logic\n    }\n}\n\npublic class Ostrich : Bird\n{\n    // Ostrich has no flying capability\n}\nHere, only birds that can actually fly implement IFlyable. An Ostrich doesn’t implement IFlyable, so there is no broken expectation about flying.\n\n\n\n\n\nDefinition\nNo client should be forced to depend on methods it does not use. Instead of one large interface, use multiple smaller, more specific interfaces.\n\n\npublic interface IWorker\n{\n    void Work();\n    void EatLunch();\n}\n\npublic class RobotWorker : IWorker\n{\n    public void Work()\n    {\n        // Robot-specific work\n    }\n\n    public void EatLunch()\n    {\n        // Robots don't eat lunch\n        // But we are forced to implement this method\n        throw new NotImplementedException();\n    }\n}\nRobotWorker is forced to implement EatLunch(), which is irrelevant.\n\n\n\npublic interface IWorker\n{\n    void Work();\n}\n\npublic interface IHumanWorker : IWorker\n{\n    void EatLunch();\n}\n\npublic class RobotWorker : IWorker\n{\n    public void Work()\n    {\n        // Robot-specific work\n    }\n}\n\npublic class Employee : IHumanWorker\n{\n    public void Work()\n    {\n        // Employee-specific work\n    }\n\n    public void EatLunch()\n    {\n        // Employee eats lunch\n    }\n}\nBy splitting the interface into IWorker and IHumanWorker, each class implements only what it needs.\n\n\n\n\n\nDefinition\n- High-level modules should not depend on low-level modules; both should depend on abstractions.\n- Abstractions should not depend on details; details should depend on abstractions.\n\n\npublic class EmailService\n{\n    public void SendEmail(string message)\n    {\n        // Logic to send email\n    }\n}\n\npublic class Notification\n{\n    private EmailService _emailService = new EmailService();\n\n    public void Send(string message)\n    {\n        _emailService.SendEmail(message);\n    }\n}\nNotification (a high-level module) depends on EmailService (a low-level module). If we want to use SMS, push notifications, or something else, we have to modify Notification.\n\n\n\npublic interface IMessageService\n{\n    void SendMessage(string message);\n}\n\npublic class EmailService : IMessageService\n{\n    public void SendMessage(string message)\n    {\n        // Logic to send email\n    }\n}\n\npublic class SmsService : IMessageService\n{\n    public void SendMessage(string message)\n    {\n        // Logic to send SMS\n    }\n}\n\npublic class Notification\n{\n    private readonly IMessageService _messageService;\n\n    public Notification(IMessageService messageService)\n    {\n        _messageService = messageService;\n    }\n\n    public void Send(string message)\n    {\n        _messageService.SendMessage(message);\n    }\n}\nNotification now depends on an abstraction (IMessageService). Changing the way messages are sent involves providing a different implementation (like SmsService) without altering the Notification class.\n\n\n\n\n\n\nSingle Responsibility Principle (SRP)\nEach class or module should have one reason to change.\nOpen-Closed Principle (OCP)\nClasses should be open for extension, closed for modification.\nLiskov Substitution Principle (LSP)\nDerived classes should be substitutable for their base classes without breaking the system.\nInterface Segregation Principle (ISP)\nSplit large interfaces into smaller, more specific ones to avoid forcing classes to implement unused methods.\nDependency Inversion Principle (DIP)\nDepend on abstractions, not on concrete implementations.\n\nBy applying these principles, you create code that is more modular, easier to maintain, and simpler to extend.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/SOLID.html#table-of-contents",
    "href": "articles/Beginning-a-project/SOLID.html#table-of-contents",
    "title": "Principles of SOLID",
    "section": "",
    "text": "Single Responsibility Principle (SRP)\nOpen-Closed Principle (OCP)\nLiskov Substitution Principle (LSP)\nInterface Segregation Principle (ISP)\nDependency Inversion Principle (DIP)\nSummary",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/SOLID.html#single-responsibility-principle-srp",
    "href": "articles/Beginning-a-project/SOLID.html#single-responsibility-principle-srp",
    "title": "Principles of SOLID",
    "section": "",
    "text": "Definition\nA class should have one and only one reason to change.\n\n\npublic class Order\n{\n    // Properties (Id, Date, Total, etc.)\n}\n\npublic class OrderService\n{\n    public void CreateOrder(Order order)\n    {\n        // Logic to create an order\n    }\n\n    public void SendOrderConfirmationEmail(Order order)\n    {\n        // Logic to send email confirmation\n    }\n}\nIn this example, the OrderService class is handling both order creation and sending confirmation emails. These are two distinct responsibilities.\n\n\n\npublic class Order\n{\n    // Properties (Id, Date, Total, etc.)\n}\n\npublic class OrderService\n{\n    public void CreateOrder(Order order)\n    {\n        // Logic to create an order\n    }\n}\n\npublic class EmailService\n{\n    public void SendOrderConfirmationEmail(Order order)\n    {\n        // Logic to send email confirmation\n    }\n}\nNow, OrderService is responsible only for creating orders, while EmailService handles sending emails. Each class has a single responsibility.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/SOLID.html#open-closed-principle-ocp",
    "href": "articles/Beginning-a-project/SOLID.html#open-closed-principle-ocp",
    "title": "Principles of SOLID",
    "section": "",
    "text": "Definition\nSoftware entities (classes, modules, functions, etc.) should be open for extension but closed for modification.\n\n\npublic class PaymentProcessor\n{\n    public void ProcessPayment(string paymentType)\n    {\n        if (paymentType == \"CreditCard\")\n        {\n            // Process credit card payment\n        }\n        else if (paymentType == \"PayPal\")\n        {\n            // Process PayPal payment\n        }\n        // If you add a new payment method, you have to modify this method again\n    }\n}\nHere, each time a new payment method is introduced, we must modify the ProcessPayment method—risking regressions and violating OCP.\n\n\n\npublic interface IPaymentMethod\n{\n    void Pay();\n}\n\npublic class CreditCardPayment : IPaymentMethod\n{\n    public void Pay()\n    {\n        // Logic to process credit card payment\n    }\n}\n\npublic class PayPalPayment : IPaymentMethod\n{\n    public void Pay()\n    {\n        // Logic to process PayPal payment\n    }\n}\n\npublic class PaymentProcessor\n{\n    public void ProcessPayment(IPaymentMethod paymentMethod)\n    {\n        paymentMethod.Pay();\n    }\n}\nPaymentProcessor now relies on an interface rather than concrete types. Adding a new payment method (e.g., GooglePayPayment) involves creating a new class that implements IPaymentMethod—no changes to PaymentProcessor are required.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/SOLID.html#liskov-substitution-principle-lsp",
    "href": "articles/Beginning-a-project/SOLID.html#liskov-substitution-principle-lsp",
    "title": "Principles of SOLID",
    "section": "",
    "text": "Definition\nSubtypes should be substitutable for their base types without affecting the correctness of the program.\n\n\npublic class Bird\n{\n    public virtual void Fly()\n    {\n        // Default flying logic\n    }\n}\n\npublic class Ostrich : Bird\n{\n    public override void Fly()\n    {\n        // Ostriches can't fly, but this method is forced by inheritance\n        // This might throw an exception or do nothing, violating expectations\n        throw new NotSupportedException(\"Ostriches cannot fly!\");\n    }\n}\nA Bird is expected to fly, but an Ostrich cannot. Substituting Ostrich where a Bird is expected can break the system.\n\n\n\npublic interface IFlyable\n{\n    void Fly();\n}\n\npublic abstract class Bird\n{\n    // Common bird properties\n}\n\npublic class Eagle : Bird, IFlyable\n{\n    public void Fly()\n    {\n        // Eagle-specific flying logic\n    }\n}\n\npublic class Ostrich : Bird\n{\n    // Ostrich has no flying capability\n}\nHere, only birds that can actually fly implement IFlyable. An Ostrich doesn’t implement IFlyable, so there is no broken expectation about flying.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/SOLID.html#interface-segregation-principle-isp",
    "href": "articles/Beginning-a-project/SOLID.html#interface-segregation-principle-isp",
    "title": "Principles of SOLID",
    "section": "",
    "text": "Definition\nNo client should be forced to depend on methods it does not use. Instead of one large interface, use multiple smaller, more specific interfaces.\n\n\npublic interface IWorker\n{\n    void Work();\n    void EatLunch();\n}\n\npublic class RobotWorker : IWorker\n{\n    public void Work()\n    {\n        // Robot-specific work\n    }\n\n    public void EatLunch()\n    {\n        // Robots don't eat lunch\n        // But we are forced to implement this method\n        throw new NotImplementedException();\n    }\n}\nRobotWorker is forced to implement EatLunch(), which is irrelevant.\n\n\n\npublic interface IWorker\n{\n    void Work();\n}\n\npublic interface IHumanWorker : IWorker\n{\n    void EatLunch();\n}\n\npublic class RobotWorker : IWorker\n{\n    public void Work()\n    {\n        // Robot-specific work\n    }\n}\n\npublic class Employee : IHumanWorker\n{\n    public void Work()\n    {\n        // Employee-specific work\n    }\n\n    public void EatLunch()\n    {\n        // Employee eats lunch\n    }\n}\nBy splitting the interface into IWorker and IHumanWorker, each class implements only what it needs.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/SOLID.html#dependency-inversion-principle-dip",
    "href": "articles/Beginning-a-project/SOLID.html#dependency-inversion-principle-dip",
    "title": "Principles of SOLID",
    "section": "",
    "text": "Definition\n- High-level modules should not depend on low-level modules; both should depend on abstractions.\n- Abstractions should not depend on details; details should depend on abstractions.\n\n\npublic class EmailService\n{\n    public void SendEmail(string message)\n    {\n        // Logic to send email\n    }\n}\n\npublic class Notification\n{\n    private EmailService _emailService = new EmailService();\n\n    public void Send(string message)\n    {\n        _emailService.SendEmail(message);\n    }\n}\nNotification (a high-level module) depends on EmailService (a low-level module). If we want to use SMS, push notifications, or something else, we have to modify Notification.\n\n\n\npublic interface IMessageService\n{\n    void SendMessage(string message);\n}\n\npublic class EmailService : IMessageService\n{\n    public void SendMessage(string message)\n    {\n        // Logic to send email\n    }\n}\n\npublic class SmsService : IMessageService\n{\n    public void SendMessage(string message)\n    {\n        // Logic to send SMS\n    }\n}\n\npublic class Notification\n{\n    private readonly IMessageService _messageService;\n\n    public Notification(IMessageService messageService)\n    {\n        _messageService = messageService;\n    }\n\n    public void Send(string message)\n    {\n        _messageService.SendMessage(message);\n    }\n}\nNotification now depends on an abstraction (IMessageService). Changing the way messages are sent involves providing a different implementation (like SmsService) without altering the Notification class.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/SOLID.html#summary-of-the-solid-principles-in-c",
    "href": "articles/Beginning-a-project/SOLID.html#summary-of-the-solid-principles-in-c",
    "title": "Principles of SOLID",
    "section": "",
    "text": "Single Responsibility Principle (SRP)\nEach class or module should have one reason to change.\nOpen-Closed Principle (OCP)\nClasses should be open for extension, closed for modification.\nLiskov Substitution Principle (LSP)\nDerived classes should be substitutable for their base classes without breaking the system.\nInterface Segregation Principle (ISP)\nSplit large interfaces into smaller, more specific ones to avoid forcing classes to implement unused methods.\nDependency Inversion Principle (DIP)\nDepend on abstractions, not on concrete implementations.\n\nBy applying these principles, you create code that is more modular, easier to maintain, and simpler to extend.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Principles of SOLID"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/index.html",
    "href": "articles/Beginning-a-project/index.html",
    "title": "Beginning a project",
    "section": "",
    "text": "Beginning your adventure in koodariverstas but have no idea where to start?\nWell today is your lucky day! Here you can find all the information that might come in handy when starting your work.\nBelow you can find all the articles that are designed to help you get your bearings when you are starting out.\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n\n\n\n\n\n\n\n\nGitHub in Koodariverstas\n\n\n\nGeneral\n\nBeginning a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 2, 2024\n\n\n\n\n\n\n\n\n\n\n\nRules and responsibilities in Koodariverstas\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila\n\n\nNov 13, 2024\n\n\n\n\n\n\n\n\n\n\n\nFilling in your starting information\n\n\n\nBeginning a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nFeb 18, 2025\n\n\n\n\n\n\n\n\n\n\n\nClean architecture\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nCommenting & Documentation\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nDRY\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nKISS\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nNaming conventions\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nPrinciples of SOLID\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nSimple react frontend\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nMiika Reijonen, Niko Laurila\n\n\nMay 22, 2025\n\n\n\n\n\n\n\n\n\n\n\nReact files and folder structure\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nMiika Reijonen, Niko Laurila\n\n\nMay 22, 2025\n\n\n\n\n\n\nNo matching items\n Back to top",
    "crumbs": [
      "All articles",
      "Beginning a project"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Naming-Conventions.html",
    "href": "articles/Beginning-a-project/Naming-Conventions.html",
    "title": "Naming conventions",
    "section": "",
    "text": "Naming conventions are agreed-upon rules and styles that guide how you name variables, functions/methods, classes, files, and other entities in a codebase. They typically cover:\n\nCase style (camelCase, PascalCase, snake_case, etc.)\n\nFile and folder naming\n\nPrefixes/suffixes (e.g., I for interfaces, Async for asynchronous methods)\n\nAbbreviations (deciding whether to use them, and how)\n\n\n“There are only two hard things in Computer Science: cache invalidation and naming things.”\n— Phil Karlton\n\n\n\n\n\n\nReadability\nClear, consistent names help developers (including future you) immediately understand the purpose of a variable, method, or file.\nMaintainability\nWhen everyone follows the same naming rules, the code becomes more uniform, reducing cognitive load and confusion.\nDiscoverability\nIntuitive names make it easy to search the codebase for relevant classes, methods, or files—key for larger projects.\nReduced Errors\nAmbiguous or misleading names can cause logic mistakes or confusion about a function’s parameters. Good names make the intent explicit.\nTeam Collaboration\nConsistent naming conventions foster smoother communication and code review processes among team members.\n\n\n\n\n\nBelow are examples using a C#-style approach, but the principles apply to many languages. The exact style may differ based on your language and organizational preferences.\n\n\n\nUse lowerCamelCase for local variables and private fields (in languages that prefer that convention):\nint userCount = 0;\nstring firstName = \"Alice\";\nAvoid ambiguous or non-descriptive names like cnt or str. Instead:\n// Bad\nint cnt;\n\n// Good\nint itemCount;\nConstants often use PascalCase or ALL_CAPS (depends on style guide). For C#, PascalCase is common:\nprivate const int DefaultPageSize = 20;\n\n\n\n\n\nUse PascalCase for public methods:\npublic void CalculateTotal() { ... }\nMethod names should convey an action or intention:\n// Bad\npublic void Data() { ... }\n\n// Good\npublic void LoadUserData() { ... }\nIf the language or framework encourages it, consider adding suffixes for asynchronous methods, like Async in C#:\npublic async Task SaveChangesAsync() { ... }\n\n\n\n\n\nClasses: Use PascalCase that conveys their responsibility or domain concept:\npublic class OrderService { ... }\nInterfaces: Many C# coding standards recommend prefixing with I:\npublic interface IOrderRepository { ... }\nAvoid “Manager” or “Helper” if it doesn’t clarify the class’s true role. Instead, be specific:\n// Less clear\npublic class OrderManager { ... }\n\n// More explicit\npublic class OrderProcessor { ... }\n\n\n\n\n\nNamespaces (C#) or Packages (Java) often follow company/domain-specific structure plus project layers:\nnamespace MyCompany.MyApp.Infrastructure.Persistence\n{\n    // classes related to data persistence\n}\n\n\n\n\n\nName files after the class or primary concept within. For example, OrderService.cs for a OrderService class.\nFolders often mirror namespaces or domain concepts (e.g., Services/OrderService.cs).\n\n\n\n\n\n\n\nBe Consistent\n\nChoose a style guide (e.g., Microsoft’s for C#, Google’s for Java/C++/Python, PEP 8 for Python) and apply it throughout the project.\n\nUse Meaningful Names\n\nReflect domain logic or the code’s purpose: CalculateInvoiceTotal() is much clearer than CalcInv().\n\nAvoid Redundancy\n\nDon’t repeat information already provided by context:\n// Redundant: class already indicates it's a controller\npublic class UserControllerController { ... }\n\n// Better\npublic class UserController { ... }\n\nKeep it Simple & Clear\n\nNames should be as short as possible while still being descriptive (KISS principle).\n\nRefactor\n\nIf a name no longer fits the code’s purpose, rename it to stay accurate and avoid confusion.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Naming conventions"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Naming-Conventions.html#why-it-matters",
    "href": "articles/Beginning-a-project/Naming-Conventions.html#why-it-matters",
    "title": "Naming conventions",
    "section": "",
    "text": "Readability\nClear, consistent names help developers (including future you) immediately understand the purpose of a variable, method, or file.\nMaintainability\nWhen everyone follows the same naming rules, the code becomes more uniform, reducing cognitive load and confusion.\nDiscoverability\nIntuitive names make it easy to search the codebase for relevant classes, methods, or files—key for larger projects.\nReduced Errors\nAmbiguous or misleading names can cause logic mistakes or confusion about a function’s parameters. Good names make the intent explicit.\nTeam Collaboration\nConsistent naming conventions foster smoother communication and code review processes among team members.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Naming conventions"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Naming-Conventions.html#examples-best-practices",
    "href": "articles/Beginning-a-project/Naming-Conventions.html#examples-best-practices",
    "title": "Naming conventions",
    "section": "",
    "text": "Below are examples using a C#-style approach, but the principles apply to many languages. The exact style may differ based on your language and organizational preferences.\n\n\n\nUse lowerCamelCase for local variables and private fields (in languages that prefer that convention):\nint userCount = 0;\nstring firstName = \"Alice\";\nAvoid ambiguous or non-descriptive names like cnt or str. Instead:\n// Bad\nint cnt;\n\n// Good\nint itemCount;\nConstants often use PascalCase or ALL_CAPS (depends on style guide). For C#, PascalCase is common:\nprivate const int DefaultPageSize = 20;\n\n\n\n\n\nUse PascalCase for public methods:\npublic void CalculateTotal() { ... }\nMethod names should convey an action or intention:\n// Bad\npublic void Data() { ... }\n\n// Good\npublic void LoadUserData() { ... }\nIf the language or framework encourages it, consider adding suffixes for asynchronous methods, like Async in C#:\npublic async Task SaveChangesAsync() { ... }\n\n\n\n\n\nClasses: Use PascalCase that conveys their responsibility or domain concept:\npublic class OrderService { ... }\nInterfaces: Many C# coding standards recommend prefixing with I:\npublic interface IOrderRepository { ... }\nAvoid “Manager” or “Helper” if it doesn’t clarify the class’s true role. Instead, be specific:\n// Less clear\npublic class OrderManager { ... }\n\n// More explicit\npublic class OrderProcessor { ... }\n\n\n\n\n\nNamespaces (C#) or Packages (Java) often follow company/domain-specific structure plus project layers:\nnamespace MyCompany.MyApp.Infrastructure.Persistence\n{\n    // classes related to data persistence\n}\n\n\n\n\n\nName files after the class or primary concept within. For example, OrderService.cs for a OrderService class.\nFolders often mirror namespaces or domain concepts (e.g., Services/OrderService.cs).",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Naming conventions"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Naming-Conventions.html#guidelines-for-effective-naming",
    "href": "articles/Beginning-a-project/Naming-Conventions.html#guidelines-for-effective-naming",
    "title": "Naming conventions",
    "section": "",
    "text": "Be Consistent\n\nChoose a style guide (e.g., Microsoft’s for C#, Google’s for Java/C++/Python, PEP 8 for Python) and apply it throughout the project.\n\nUse Meaningful Names\n\nReflect domain logic or the code’s purpose: CalculateInvoiceTotal() is much clearer than CalcInv().\n\nAvoid Redundancy\n\nDon’t repeat information already provided by context:\n// Redundant: class already indicates it's a controller\npublic class UserControllerController { ... }\n\n// Better\npublic class UserController { ... }\n\nKeep it Simple & Clear\n\nNames should be as short as possible while still being descriptive (KISS principle).\n\nRefactor\n\nIf a name no longer fits the code’s purpose, rename it to stay accurate and avoid confusion.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Naming conventions"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Commenting-and-Documentation.html",
    "href": "articles/Beginning-a-project/Commenting-and-Documentation.html",
    "title": "Commenting & Documentation",
    "section": "",
    "text": "Comments are in-code annotations that clarify why or how certain logic works, without altering the program’s runtime behavior.\nDocumentation refers to more formal or generated descriptions (like XML docs in C#, JavaDocs in Java, docstrings in Python, or Markdown files) that help users or maintainers understand a module’s purpose, API, and usage.\n\n“Good code is its own best documentation” – Steve McConnell\nYet, strategic documentation and comments remain invaluable when explaining non-obvious decisions or architectural overviews.\n\n\n\n\n\n\nReadability\n\nClear comments help developers (including your future self) quickly grasp the intent behind complex or less obvious segments of code.\n\nMaintainability\n\nAccurate documentation and comments reduce friction when updating or refactoring. Developers can see how everything fits together without reverse-engineering logic.\n\nCollaboration\n\nIn multi-developer teams, consistent commenting styles and thorough documentation ensure shared understanding, reducing onboarding time and confusion.\n\nKnowledge Transfer\n\nWhen a key developer leaves, well-documented code softens the knowledge gap for new or remaining team members.\n\nUser-Facing Clarity\n\nLibraries and frameworks rely heavily on good docs (e.g., docstrings, README files) so external consumers can integrate and use them effectively.\n\n\n\n\n\n\nUsing C#-style examples, but these principles apply to nearly any language.\n\n\n\nExplain the “Why,” Not the “What”\n// BAD: This comment merely restates the code\nint total = orderList.Count; // get the count of orders\n\n// GOOD: Explains reasoning behind a decision or approach\n// The order list is guaranteed to have at least one item based on prior validation.\nint total = orderList.Count;\nHighlight Edge Cases or Workarounds\n// The external API can return null if the item doesn't exist, so handle that case here\nvar result = ExternalService.GetItemById(id);\nKeep Comments Up-to-Date\n\nIf the code changes but the comment remains outdated, it causes confusion.\n\nRegularly review or refactor comments alongside code.\n\n\n\n\n\n\nXML Comments (C#)\n/// &lt;summary&gt;\n///  Processes an order by validating its items, calculating totals, and updating the database.\n/// &lt;/summary&gt;\n/// &lt;param name=\"order\"&gt;The order to be processed.&lt;/param&gt;\n/// &lt;returns&gt;Returns true if the process succeeds; otherwise false.&lt;/returns&gt;\npublic bool ProcessOrder(Order order)\n{\n    // Method logic\n}\nJavaDoc (Java)\n/**\n * Processes an order by validating its items, calculating totals, \n * and updating the database.\n *\n * @param order the order to be processed\n * @return true if the process succeeds; otherwise false\n */\npublic boolean processOrder(Order order) {\n    // Method logic\n}\nDocstrings (Python)\ndef process_order(order):\n    \"\"\"\n    Processes an order by validating its items, calculating totals,\n    and updating the database.\n\n    :param order: The order to be processed\n    :returns: True if the process succeeds; otherwise False\n    \"\"\"\n    # Function logic\n\n\n\n\n\nREADME / Markdown Files\n\nInclude an overview of the project, setup instructions, usage examples, and contribution guidelines in a README.md.\n\nArchitecture Docs\n\nLarger systems benefit from diagrams and architectural overviews (e.g., in docs/ folder or a wiki).\n\nAPI Docs\n\nFor public APIs, auto-generate docs from doc comments (e.g., with Doxygen, Swagger, or DocFX).\n\n\n\n\n\n\nConsistency\n\nUse a standard format for doc comments (e.g., XML docs in C#, JavaDoc in Java).\n\nKeep style consistent across the team/project.\n\nBrevity and Clarity\n\nMake comments/doc descriptions concise yet informative.\n\nAvoid long-winded paragraphs unless absolutely necessary.\n\nAvoid Redundancy\n\nDon’t duplicate code in the comment. Instead, clarify logic, rationale, or usage.\n\nIf the code is already self-explanatory, skip the comment.\n\nDocument Public APIs Thoroughly\n\nPublic-facing methods, libraries, or endpoints need especially clear documentation for external consumers.\n\nUpdate Alongside Code Changes\n\nTreat comments/docs as part of the code. When refactoring, revise or remove outdated documentation.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Commenting & Documentation"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Commenting-and-Documentation.html#why-it-matters",
    "href": "articles/Beginning-a-project/Commenting-and-Documentation.html#why-it-matters",
    "title": "Commenting & Documentation",
    "section": "",
    "text": "Readability\n\nClear comments help developers (including your future self) quickly grasp the intent behind complex or less obvious segments of code.\n\nMaintainability\n\nAccurate documentation and comments reduce friction when updating or refactoring. Developers can see how everything fits together without reverse-engineering logic.\n\nCollaboration\n\nIn multi-developer teams, consistent commenting styles and thorough documentation ensure shared understanding, reducing onboarding time and confusion.\n\nKnowledge Transfer\n\nWhen a key developer leaves, well-documented code softens the knowledge gap for new or remaining team members.\n\nUser-Facing Clarity\n\nLibraries and frameworks rely heavily on good docs (e.g., docstrings, README files) so external consumers can integrate and use them effectively.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Commenting & Documentation"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Commenting-and-Documentation.html#examples-best-practices",
    "href": "articles/Beginning-a-project/Commenting-and-Documentation.html#examples-best-practices",
    "title": "Commenting & Documentation",
    "section": "",
    "text": "Using C#-style examples, but these principles apply to nearly any language.\n\n\n\nExplain the “Why,” Not the “What”\n// BAD: This comment merely restates the code\nint total = orderList.Count; // get the count of orders\n\n// GOOD: Explains reasoning behind a decision or approach\n// The order list is guaranteed to have at least one item based on prior validation.\nint total = orderList.Count;\nHighlight Edge Cases or Workarounds\n// The external API can return null if the item doesn't exist, so handle that case here\nvar result = ExternalService.GetItemById(id);\nKeep Comments Up-to-Date\n\nIf the code changes but the comment remains outdated, it causes confusion.\n\nRegularly review or refactor comments alongside code.\n\n\n\n\n\n\nXML Comments (C#)\n/// &lt;summary&gt;\n///  Processes an order by validating its items, calculating totals, and updating the database.\n/// &lt;/summary&gt;\n/// &lt;param name=\"order\"&gt;The order to be processed.&lt;/param&gt;\n/// &lt;returns&gt;Returns true if the process succeeds; otherwise false.&lt;/returns&gt;\npublic bool ProcessOrder(Order order)\n{\n    // Method logic\n}\nJavaDoc (Java)\n/**\n * Processes an order by validating its items, calculating totals, \n * and updating the database.\n *\n * @param order the order to be processed\n * @return true if the process succeeds; otherwise false\n */\npublic boolean processOrder(Order order) {\n    // Method logic\n}\nDocstrings (Python)\ndef process_order(order):\n    \"\"\"\n    Processes an order by validating its items, calculating totals,\n    and updating the database.\n\n    :param order: The order to be processed\n    :returns: True if the process succeeds; otherwise False\n    \"\"\"\n    # Function logic\n\n\n\n\n\nREADME / Markdown Files\n\nInclude an overview of the project, setup instructions, usage examples, and contribution guidelines in a README.md.\n\nArchitecture Docs\n\nLarger systems benefit from diagrams and architectural overviews (e.g., in docs/ folder or a wiki).\n\nAPI Docs\n\nFor public APIs, auto-generate docs from doc comments (e.g., with Doxygen, Swagger, or DocFX).\n\n\n\n\n\n\nConsistency\n\nUse a standard format for doc comments (e.g., XML docs in C#, JavaDoc in Java).\n\nKeep style consistent across the team/project.\n\nBrevity and Clarity\n\nMake comments/doc descriptions concise yet informative.\n\nAvoid long-winded paragraphs unless absolutely necessary.\n\nAvoid Redundancy\n\nDon’t duplicate code in the comment. Instead, clarify logic, rationale, or usage.\n\nIf the code is already self-explanatory, skip the comment.\n\nDocument Public APIs Thoroughly\n\nPublic-facing methods, libraries, or endpoints need especially clear documentation for external consumers.\n\nUpdate Alongside Code Changes\n\nTreat comments/docs as part of the code. When refactoring, revise or remove outdated documentation.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Commenting & Documentation"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Responsibilities.html#here-are-the-general-rules",
    "href": "articles/Beginning-a-project/Responsibilities.html#here-are-the-general-rules",
    "title": "Rules and responsibilities in Koodariverstas",
    "section": "Here are the general rules",
    "text": "Here are the general rules\n1. Get to know your position. If the “employer” for the project asks you for extra work that is not covered in the contract, you have the right to refuse. You are not obligated to do anything outside what the written contract states.\n2. Do what your contract says. You are expected to complete the work that is laid out in the written contract you have signed. You are contractually obligated to do the work that you have agreed on.\n3. Don’t break your NDA. If the company providing a project requires you to sign an NDA (Non-disclosure agreement), you are legally obligated to not share any information to outside parties. In the case an NDA is signed, each party (Including Koodariverstas) will sign their own NDA. Each party is legally responsible for their own NDA.\n4. Don’t be afraid to ask questions. If you get the feeling that you don’t understand something or you would like to know something, don’t be afraid to ask. You can freely ask Koodariverstas anything you would like to get clarification on. You should also be comfortable with asking the company that has agreed to lead your project for any help in case you need it.\n5. Have fun and learn! We want to provide you with a great opportunity to get to work with real companies in real projects. We encourage you to get the most of your time with us. We want you to be able to confidently take pride in your work and learn as much as possible.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Rules and responsibilities in Koodariverstas"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Responsibilities.html#responsibilities-of-each-party",
    "href": "articles/Beginning-a-project/Responsibilities.html#responsibilities-of-each-party",
    "title": "Rules and responsibilities in Koodariverstas",
    "section": "Responsibilities of each party",
    "text": "Responsibilities of each party\n\nYou\nYou are expected to work within the limits of the written contract you have agreed on. You are expected to work as a professional for the company whose project you have accepted.\nYour responsibility is to finish the project in an acceptable manner. You are responsible for the work you do, and how you portray yourself. It is up to you to be a professional and act like a professional.\nYou are also expected to keep track of your working hours and communicate with either Koodariverstas or the client.\n\n\nKoodariverstas\nWe are responsible for selecting suitable projects, and the candidates for completing the projects. We are also responsible for the possible mediation that might be needed in the case something goes horribly wrong.\nWe are not obligated to finish unfinished work, but we will mediate and try to find solutions between you and the client.\nWe are also responsible for your course credits, and recognition of your work in the case the client has a good reason to not credit you for the work you have done.\nKoodariverstas consists of teachers and expert personnel from XAMK, and is a project backed and managed by the European Union and XAMK therefore Koodariverstas does not receive financial compensation from the client.\nWe will also work closely with you and the client when drafting and signing the contracts and we will ensure that you are treated fairly and the clients needs are met.\n\n\nClient\nThe client is responsible for the final product they receive from you. They act as the product owners for their project.\nThis means that the client themselves is responsible for the project in the case something goes horribly wrong. The client has the final say on the completion of the project and how the project is done.\nThey are also expected to work in coordination with you to give you the resources and guidance you might need during your work.\nThey are expected to provide a signed recommendation letter and certificate of employment for you if you succeed in your work.\nThey can only refuse to write a recommendation after all mediation attempts have failed and they have given a good and understandable reason to refuse.\nIn this case Koodariverstas will write an official recommendation for you signed by XAMK.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Rules and responsibilities in Koodariverstas"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/starting-information.html",
    "href": "articles/Beginning-a-project/starting-information.html",
    "title": "Filling in your starting information",
    "section": "",
    "text": "When you begin work within Koodariverstas, or in a project that is managed by Koodariverstas, you are required to fill in your information for the European Union. Since Koodariverstas is funded in part by the EU, the EU has the legal right to ask for every participants information.\nThis information is provided for the European Union, and is used solely for the tracking of the funding received by Koodariverstas, your information will NOT be sold, used for advertisement, used to contact you or profile you.\nKoodariverstas will not collect any data on the participants outside the legal requirements that are placed on us by the European Union and Traficom (Finnish national transportation and communication agency).\n\nNote: The collection of personal data is based on Article 69 of the Common Provisions Regulation of the European Union (EU 1060/2021) and the national Act on the Financing of European Union Regional Development and Structural Policy Projects 757/2021.\nThe personal data is processed in compliance with the European Union’s General Data Protection Regulation (EU 679/2016) and the national Data Protection Act 1050/2018.\nYou can learn more about the laws mentioned here.\n\n\n\nYou can access the EURA2021 system through this link: http://www.eura2021.fi/osallistuja. You can also scan the qr-code provided below.\n\n\n\nqr code for EURA2021\n\n\n\nWhen you access the site, you are required to accept the terms and conditions before you can go further. You can select your preferred language from the top right of the page.\nCitizens of Finland can use their preferred bank of choice to complete their login. After logging in, make sure the information shown to you is correct.\nIf you are a citizen of a different country, and don’t have a Finnish bank account, you can use the “Ulkomaalaisen tunnistustavat” button located at the bottom of the page (Red arrows). \nAfter you have logged in, make sure the information you are provided with is correct.\n\n\n\n\nAfter you have logged in, you are required to fill in some basic information about your current situation. Here are the basics you need to know when entering information to EURA.\nWhen you are filling out your starting information, you will be asked for the project id.\nThis projects id is: S30794.\nIf you scanned the qr code, this information is automatically filled and you will not be asked to provide a project id.\nFill in the required fields, use the table below for reference when filling in your information.\n\n\n\n\n\n\n\nQuestion\nAnwser\n\n\n\n\nBeginning date\nThis is the date you started working in the project\n\n\nHighest education of the participant\nThis is the highest level of education you have reached before beginning in the project. (Only degrees you have a diploma from are valid).\n\n\nCurrent employment status\nStudent\n\n\n\nYou are also required to fill in information about your current status when your participation in the project ends. Guidance to fill in the ending information can be found from the “Ending a project” category of this wiki. You can also access the article from this link.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Filling in your starting information"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/starting-information.html#accessing-eura2021",
    "href": "articles/Beginning-a-project/starting-information.html#accessing-eura2021",
    "title": "Filling in your starting information",
    "section": "",
    "text": "You can access the EURA2021 system through this link: http://www.eura2021.fi/osallistuja. You can also scan the qr-code provided below.\n\n\n\nqr code for EURA2021\n\n\n\nWhen you access the site, you are required to accept the terms and conditions before you can go further. You can select your preferred language from the top right of the page.\nCitizens of Finland can use their preferred bank of choice to complete their login. After logging in, make sure the information shown to you is correct.\nIf you are a citizen of a different country, and don’t have a Finnish bank account, you can use the “Ulkomaalaisen tunnistustavat” button located at the bottom of the page (Red arrows). \nAfter you have logged in, make sure the information you are provided with is correct.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Filling in your starting information"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/starting-information.html#filling-in-your-information",
    "href": "articles/Beginning-a-project/starting-information.html#filling-in-your-information",
    "title": "Filling in your starting information",
    "section": "",
    "text": "After you have logged in, you are required to fill in some basic information about your current situation. Here are the basics you need to know when entering information to EURA.\nWhen you are filling out your starting information, you will be asked for the project id.\nThis projects id is: S30794.\nIf you scanned the qr code, this information is automatically filled and you will not be asked to provide a project id.\nFill in the required fields, use the table below for reference when filling in your information.\n\n\n\n\n\n\n\nQuestion\nAnwser\n\n\n\n\nBeginning date\nThis is the date you started working in the project\n\n\nHighest education of the participant\nThis is the highest level of education you have reached before beginning in the project. (Only degrees you have a diploma from are valid).\n\n\nCurrent employment status\nStudent\n\n\n\nYou are also required to fill in information about your current status when your participation in the project ends. Guidance to fill in the ending information can be found from the “Ending a project” category of this wiki. You can also access the article from this link.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Filling in your starting information"
    ]
  },
  {
    "objectID": "articles/During-a-project/managing a workflow.html",
    "href": "articles/During-a-project/managing a workflow.html",
    "title": "Managing a workflow",
    "section": "",
    "text": "This is a page about managing a workflow during a project\nThis page is currently under construction!\n\n\n\n Back to top",
    "crumbs": [
      "All articles",
      "During a project",
      "Managing a workflow"
    ]
  },
  {
    "objectID": "articles/During-a-project/YAGNI.html",
    "href": "articles/During-a-project/YAGNI.html",
    "title": "YAGNI",
    "section": "",
    "text": "YAGNI stands for You Aren’t Gonna Need It. It is a principle often associated with Extreme Programming (XP) and Agile methodologies, which states that you should not add functionality until it is necessary.\n\n“Always implement things when you actually need them, never when you just foresee that you need them.” – Ron Jeffries\n\n\n\n\n\nReduced Complexity: Developing for hypothetical future requirements can clutter your code with unused functionality.\n\nFaster Delivery: Concentrating on current needs ensures you don’t invest time in code that might never be used, allowing you to ship features faster.\n\nEasier Refactoring: It’s simpler to refactor when new requirements appear than to maintain preemptive structures that may never be adopted.\n\nCost-Effective: Writing and maintaining unused code wastes development and testing resources.\n\n\n\n\n\nLet’s explore a scenario of an inventory system that might (or might not) need advanced analytics in the future.\n\n\npublic class InventorySystem\n{\n    // Current requirement: Just store and retrieve item stock levels.\n    private readonly Dictionary&lt;string, int&gt; _stockLevels = new Dictionary&lt;string, int&gt;();\n\n    // FUTURE requirement (maybe): Generate complex reports on stock turnover.\n    // Let's preemptively implement a bunch of analytics to \"be prepared.\"\n    \n    private readonly Dictionary&lt;string, List&lt;DateTime&gt;&gt; _itemAccessTimes = new Dictionary&lt;string, List&lt;DateTime&gt;&gt;();\n\n    // Storing every item access time for potential analytics\n    public void AccessItem(string itemId)\n    {\n        if (!_itemAccessTimes.ContainsKey(itemId))\n        {\n            _itemAccessTimes[itemId] = new List&lt;DateTime&gt;();\n        }\n        _itemAccessTimes[itemId].Add(DateTime.Now);\n        \n        // Existing code to retrieve or decrement stock, etc.\n    }\n\n    public void GenerateTurnoverReport()\n    {\n        // Complex logic to analyze _itemAccessTimes\n        // This is a lot of work, no one asked for it yet!\n        // ...\n    }\n\n    public void AddStock(string itemId, int quantity)\n    {\n        if (_stockLevels.ContainsKey(itemId))\n        {\n            _stockLevels[itemId] += quantity;\n        }\n        else\n        {\n            _stockLevels[itemId] = quantity;\n        }\n    }\n\n    public int GetStock(string itemId)\n    {\n        return _stockLevels.ContainsKey(itemId) ? _stockLevels[itemId] : 0;\n    }\n}\n\n\n\nUnnecessary Complexity: We have an entire analytics setup (_itemAccessTimes, GenerateTurnoverReport()) that isn’t currently needed.\n\nMaintenance Overhead: We must maintain, test, and potentially refactor this code for analytics—even though it might never be used.\n\nBloating the Codebase: This extra code clutters the class and distracts from the real, current functionality: tracking stock levels.\n\n\n\n\n\n\npublic class InventorySystem\n{\n    private readonly Dictionary&lt;string, int&gt; _stockLevels = new Dictionary&lt;string, int&gt;();\n\n    public void AddStock(string itemId, int quantity)\n    {\n        if (_stockLevels.ContainsKey(itemId))\n        {\n            _stockLevels[itemId] += quantity;\n        }\n        else\n        {\n            _stockLevels[itemId] = quantity;\n        }\n    }\n\n    public int GetStock(string itemId)\n    {\n        return _stockLevels.ContainsKey(itemId) ? _stockLevels[itemId] : 0;\n    }\n\n    // Note: No analytics features implemented until there's an actual requirement.\n}\n\n\n\nFocus on Present Requirements: The code does exactly what’s needed—add and retrieve stock.\n\nEasier to Understand & Maintain: There’s no extra burden of analytics code, making the class simpler to review and test.\n\nPrepared for Future: If analytics do become an actual requirement, we can introduce it at that time, basing our design on real usage patterns.\n\n\n\n\n\n\n\n\nImplement Features On-Demand: Add capabilities only when there is a real, current need.\n\nResist “Just-in-Case” Code: Avoid writing code for hypothetical scenarios that might never happen.\n\nIterative Development: Use Agile or iterative approaches where you can introduce new functionality in smaller increments.\n\nRefactor for Real Requirements: When a legitimate need arises, add or refactor features to accommodate it.\n\nBalance with Forward Thinking: While YAGNI discourages over-engineering, keep your design flexible enough to extend—just don’t overbuild.\n\n\n\n\n\nYAGNI helps maintain a lean, focused codebase by preventing unneeded features from creeping in. This principle keeps your development process efficient and your software simpler to maintain. When a new requirement truly emerges, you can address it with targeted design and implementation—rather than supporting speculative features that might never be used.",
    "crumbs": [
      "All articles",
      "During a project",
      "YAGNI"
    ]
  },
  {
    "objectID": "articles/During-a-project/YAGNI.html#example-in-c",
    "href": "articles/During-a-project/YAGNI.html#example-in-c",
    "title": "YAGNI",
    "section": "",
    "text": "Let’s explore a scenario of an inventory system that might (or might not) need advanced analytics in the future.\n\n\npublic class InventorySystem\n{\n    // Current requirement: Just store and retrieve item stock levels.\n    private readonly Dictionary&lt;string, int&gt; _stockLevels = new Dictionary&lt;string, int&gt;();\n\n    // FUTURE requirement (maybe): Generate complex reports on stock turnover.\n    // Let's preemptively implement a bunch of analytics to \"be prepared.\"\n    \n    private readonly Dictionary&lt;string, List&lt;DateTime&gt;&gt; _itemAccessTimes = new Dictionary&lt;string, List&lt;DateTime&gt;&gt;();\n\n    // Storing every item access time for potential analytics\n    public void AccessItem(string itemId)\n    {\n        if (!_itemAccessTimes.ContainsKey(itemId))\n        {\n            _itemAccessTimes[itemId] = new List&lt;DateTime&gt;();\n        }\n        _itemAccessTimes[itemId].Add(DateTime.Now);\n        \n        // Existing code to retrieve or decrement stock, etc.\n    }\n\n    public void GenerateTurnoverReport()\n    {\n        // Complex logic to analyze _itemAccessTimes\n        // This is a lot of work, no one asked for it yet!\n        // ...\n    }\n\n    public void AddStock(string itemId, int quantity)\n    {\n        if (_stockLevels.ContainsKey(itemId))\n        {\n            _stockLevels[itemId] += quantity;\n        }\n        else\n        {\n            _stockLevels[itemId] = quantity;\n        }\n    }\n\n    public int GetStock(string itemId)\n    {\n        return _stockLevels.ContainsKey(itemId) ? _stockLevels[itemId] : 0;\n    }\n}\n\n\n\nUnnecessary Complexity: We have an entire analytics setup (_itemAccessTimes, GenerateTurnoverReport()) that isn’t currently needed.\n\nMaintenance Overhead: We must maintain, test, and potentially refactor this code for analytics—even though it might never be used.\n\nBloating the Codebase: This extra code clutters the class and distracts from the real, current functionality: tracking stock levels.\n\n\n\n\n\n\npublic class InventorySystem\n{\n    private readonly Dictionary&lt;string, int&gt; _stockLevels = new Dictionary&lt;string, int&gt;();\n\n    public void AddStock(string itemId, int quantity)\n    {\n        if (_stockLevels.ContainsKey(itemId))\n        {\n            _stockLevels[itemId] += quantity;\n        }\n        else\n        {\n            _stockLevels[itemId] = quantity;\n        }\n    }\n\n    public int GetStock(string itemId)\n    {\n        return _stockLevels.ContainsKey(itemId) ? _stockLevels[itemId] : 0;\n    }\n\n    // Note: No analytics features implemented until there's an actual requirement.\n}\n\n\n\nFocus on Present Requirements: The code does exactly what’s needed—add and retrieve stock.\n\nEasier to Understand & Maintain: There’s no extra burden of analytics code, making the class simpler to review and test.\n\nPrepared for Future: If analytics do become an actual requirement, we can introduce it at that time, basing our design on real usage patterns.",
    "crumbs": [
      "All articles",
      "During a project",
      "YAGNI"
    ]
  },
  {
    "objectID": "articles/During-a-project/YAGNI.html#guidelines-for-applying-yagni",
    "href": "articles/During-a-project/YAGNI.html#guidelines-for-applying-yagni",
    "title": "YAGNI",
    "section": "",
    "text": "Implement Features On-Demand: Add capabilities only when there is a real, current need.\n\nResist “Just-in-Case” Code: Avoid writing code for hypothetical scenarios that might never happen.\n\nIterative Development: Use Agile or iterative approaches where you can introduce new functionality in smaller increments.\n\nRefactor for Real Requirements: When a legitimate need arises, add or refactor features to accommodate it.\n\nBalance with Forward Thinking: While YAGNI discourages over-engineering, keep your design flexible enough to extend—just don’t overbuild.",
    "crumbs": [
      "All articles",
      "During a project",
      "YAGNI"
    ]
  },
  {
    "objectID": "articles/During-a-project/YAGNI.html#conclusion",
    "href": "articles/During-a-project/YAGNI.html#conclusion",
    "title": "YAGNI",
    "section": "",
    "text": "YAGNI helps maintain a lean, focused codebase by preventing unneeded features from creeping in. This principle keeps your development process efficient and your software simpler to maintain. When a new requirement truly emerges, you can address it with targeted design and implementation—rather than supporting speculative features that might never be used.",
    "crumbs": [
      "All articles",
      "During a project",
      "YAGNI"
    ]
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "All articles",
    "section": "",
    "text": "Welcome to all articles!\nThis page consists of all the articles currently in the Wiki!\nHere you can find all the articles regardless of their category or date, you can also take advantage of the advanced search functionality to get to know all the articles we currently have.\n\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nAdding and Editing pages\n\n\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila\n\n\nSep 25, 2024\n\n\n\n\n\n\n\n\n\n\n\nClean architecture\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nCommenting & Documentation\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nDRY\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nFilling in your ending information\n\n\n\nEnding a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nFeb 18, 2025\n\n\n\n\n\n\n\n\n\n\n\nFilling in your starting information\n\n\n\nBeginning a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nFeb 18, 2025\n\n\n\n\n\n\n\n\n\n\n\nGathering and receiving feedback\n\n\n\nEnding a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nNov 13, 2024\n\n\n\n\n\n\n\n\n\n\n\nGitHub in Koodariverstas\n\n\n\nGeneral\n\nBeginning a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 2, 2024\n\n\n\n\n\n\n\n\n\n\n\nGuide to Taiga.io\n\n\n\nGeneral\n\nDuring a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 17, 2024\n\n\n\n\n\n\n\n\n\n\n\nKISS\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nManaging a workflow\n\n\n\nDuring a project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModular & Reusable code\n\n\n\nDuring a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nNaming conventions\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nOpen-Source projects\n\n\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila\n\n\nDec 17, 2024\n\n\n\n\n\n\n\n\n\n\n\nPrinciples of SOLID\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nReact files and folder structure\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nMiika Reijonen, Niko Laurila\n\n\nMay 22, 2025\n\n\n\n\n\n\n\n\n\n\n\nReadability & Maintainability\n\n\n\nDuring a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nRules and responsibilities in Koodariverstas\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila\n\n\nNov 13, 2024\n\n\n\n\n\n\n\n\n\n\n\nSimple react frontend\n\n\n\nBeginning a project\n\nGeneral\n\n\n\n\n\n\n\nMiika Reijonen, Niko Laurila\n\n\nMay 22, 2025\n\n\n\n\n\n\n\n\n\n\n\nSoftware development in open source projects\n\n\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila\n\n\nJan 7, 2025\n\n\n\n\n\n\n\n\n\n\n\nStackEdit Format guide\n\n\n\nGeneral\n\n\n\n\n\n\n\nTerhi Patja\n\n\nOct 2, 2024\n\n\n\n\n\n\n\n\n\n\n\nTools\n\n\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 3, 2024\n\n\n\n\n\n\n\n\n\n\n\nYAGNI\n\n\n\nDuring a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\nNo matching items\n\n  \n\n Back to top",
    "crumbs": [
      "All articles"
    ]
  },
  {
    "objectID": "articles/Ending-a-project/Ending-information.html",
    "href": "articles/Ending-a-project/Ending-information.html",
    "title": "Filling in your ending information",
    "section": "",
    "text": "When your participation in a project is coming to an end, you are required to fill out the ending information for the European Union. This information is used to track the overall success of Koodariverstas and it’s impact on participants employment status.\n\nNote: If you need a refresher on how to log in to EURA, you can find it from our previous article here.\n\nYou an find the fields for entering your ending information when opening the project page in EURA.\n\n\n\n\n\nUse the button located at the bottom of the page to provide your ending information and access the form.\n\n\n\n\n\n\nNote: EURA asks you to provide the ending information every time you participate in a project ran by koodariverstas. This is not necessary since you can edit your previously submitted information at a later date.\n\n\n\nThere are different ways to provide your information depending on the circumstances of your participation.\n\nIf this is your first and only time of participating in a project ran by koodariverstas\n\nFill in your ending information like normal and add the date your participation ends.\n\nIf you have previously participated and submitted the information already.\n\nYou can go back to your original submission and edit the ending date to match the end of your latest project.\n\nYou have 2 back-to-back projects with koodariverstas.\n\nIn the case you know that you are participating in two different cases with different ending dates. Provide the ending date of the later project.\n\n\nNote: The important part of submitting the information is to correctly mark the entire duration of your participation whether it’s just for one short project or multiple longer ones. You can always edit your ending information to reflect your current circumstances.\n\n\n\n\n\nThe image below shows you the form you need to fill.\nThis information consists of:\n\nEnding date\nEmployment status when your participation ends\nDid you finish your diploma or other relevant professional certificates thanks to your participation\n\n\n\n\n\n\nThis wraps up the information collection of your participation. Remember that if you end up participating in another project with us, you can always edit your ending date.",
    "crumbs": [
      "All articles",
      "Ending a project",
      "Filling in your ending information"
    ]
  },
  {
    "objectID": "articles/Ending-a-project/Ending-information.html#providing-the-correct-information",
    "href": "articles/Ending-a-project/Ending-information.html#providing-the-correct-information",
    "title": "Filling in your ending information",
    "section": "",
    "text": "There are different ways to provide your information depending on the circumstances of your participation.\n\nIf this is your first and only time of participating in a project ran by koodariverstas\n\nFill in your ending information like normal and add the date your participation ends.\n\nIf you have previously participated and submitted the information already.\n\nYou can go back to your original submission and edit the ending date to match the end of your latest project.\n\nYou have 2 back-to-back projects with koodariverstas.\n\nIn the case you know that you are participating in two different cases with different ending dates. Provide the ending date of the later project.\n\n\nNote: The important part of submitting the information is to correctly mark the entire duration of your participation whether it’s just for one short project or multiple longer ones. You can always edit your ending information to reflect your current circumstances.",
    "crumbs": [
      "All articles",
      "Ending a project",
      "Filling in your ending information"
    ]
  },
  {
    "objectID": "articles/Ending-a-project/Ending-information.html#information-form",
    "href": "articles/Ending-a-project/Ending-information.html#information-form",
    "title": "Filling in your ending information",
    "section": "",
    "text": "The image below shows you the form you need to fill.\nThis information consists of:\n\nEnding date\nEmployment status when your participation ends\nDid you finish your diploma or other relevant professional certificates thanks to your participation\n\n\n\n\n\n\nThis wraps up the information collection of your participation. Remember that if you end up participating in another project with us, you can always edit your ending date.",
    "crumbs": [
      "All articles",
      "Ending a project",
      "Filling in your ending information"
    ]
  },
  {
    "objectID": "articles/General/index.html",
    "href": "articles/General/index.html",
    "title": "General articles",
    "section": "",
    "text": "Welcome to General articles!\nThese articles cover miscellaneous subjects and are designed for you to learn more about various topics. Here we cover the basics of various topics you might find useful when working in Koodariverstas. Feel free to browse the selection of articles below.\n\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n\n\n\n\n\n\n\n\nSoftware development in open source projects\n\n\n\n\n\n\nNiko Laurila\n\n\nJan 7, 2025\n\n\n\n\n\n\n\n\n\n\n\nOpen-Source projects\n\n\n\n\n\n\nNiko Laurila\n\n\nDec 17, 2024\n\n\n\n\n\n\n\n\n\n\n\nGuide to Taiga.io\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 17, 2024\n\n\n\n\n\n\n\n\n\n\n\nTools\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 3, 2024\n\n\n\n\n\n\n\n\n\n\n\nGitHub in Koodariverstas\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 2, 2024\n\n\n\n\n\n\n\n\n\n\n\nStackEdit Format guide\n\n\n\n\n\n\nTerhi Patja\n\n\nOct 2, 2024\n\n\n\n\n\n\n\n\n\n\n\nAdding and Editing pages\n\n\n\n\n\n\nNiko Laurila\n\n\nSep 25, 2024\n\n\n\n\n\n\nNo matching items\n Back to top",
    "crumbs": [
      "All articles",
      "General articles"
    ]
  },
  {
    "objectID": "articles/General/OpensourceDevelopment.html",
    "href": "articles/General/OpensourceDevelopment.html",
    "title": "Software development in open source projects",
    "section": "",
    "text": "Community based development\nOpen source software is developed by a community of developers that form a community around the project. Every projects community is its own ecosystem with its own rules and regulations.\nCommunities usually have people from all walks of life from around the world, for example there might be developers from United States, Argentina, Brazil, Finland, China, Japan, Turkey, Greece and Vietnam all working together in the same community developing the same software for everyone to use.\nEvery community is its own entity, but their workflow and project management usually fits in one of the four most common community types.\n\nSingle Vendor Open Source Project:\nThese projects are usually ran by corporations looking to expand their product development capabilities using open source communities. The corporation own the legal rights to the specific version of software being developed in the project.\nThese projects are generally not considered “Fully open source” since a single entity holds the legal right to sell the software. If the community is unhappy with the direction the corporation is taking the project, the community has the legal right to fork the project and create their own competing product based on the work done by the corporation and the community.\nThis creates a power balance, where the owner of the product gets more development resources, and the community gets to work on a real product and keep the corporation in check with the existing threat of creating a competitor without the corporation having the ability to intervene.\nDeveloper communities:\nThese are your “typical” open source projects. Usually a project is created by a single developer or a small team of developers with a goal to solve a problem or create a new solution to replace an existing solution. The lead developers are the legal owners of the software, but usually the lead developers choose a license that gives the rights to everyone who wants them. These communities have multiple different methods to managing the project.\nThese communities have two main ways to manage the project the community is working on. The first method has the original creator/creators be the sole deciding factor. This means that the people who started the project, get the final say on what gets implemented and what doesn’t. They can also appoint community members to a board of directors that makes decisions as a group.\nThe second method is a democratic voting system. This method makes all the changes and proposals visible to anyone to vote on, the code that the community likes the most gets added to the project where the less popular changes might get ignored.\nBoth of these methods have their positives and negatives, and community founders usually struggle to stick with a single method for directing the project. Thats why when the project grows older, they start to grow their own customs and methods specific to the project they are working on. This makes every open source community its own unique ecosystem.\nUser Communities\nUser communities share similarities with developer communities, the key difference being that in user communities the end users retain the copyright of the software. This means that the community acts as a “Vendor” for the users of the software, but has no copyright of the usage or distribution of the software itself. These projects are usually based on corporations internal tools, that were open-sourced and distributed to everyone for free.\nIn most of these cases, the original corporation who developed the software in-house, is no longer interested in further development of their software, and releases it to the wider world instead of silently sun setting it. User communities also enable multiple corporations to collaborate on a shared project with the benefits shared among all participating companies. An example of this kind of community is the GENIVI Alliance, a group of vehicle manufacturers (BMW, Renault, General Motors, Honda, Jaguar etc.). These corporations use a user community driven approach to share development costs of their infotainment systems.\nOpen Source competence centers\nThese are centers for open source software. Koodariverstas fits best into this category. An open source competence center is a center that focuses on helping its clients and users utilizing open source solutions. Sometimes this might be suggesting a suitable open source solution for a problem a client has, or maybe customizing an existing open source solution to feed the needs of a client.\nThese centers combine the know-how and connections to match users with solutions and developers with suitable projects. Successfully managed open source competence centers exist all over the world. The initiating organization, the membership structure, the activities and size may vary. However, they all work with the common goal of improving the environment and general conditions to use and develop open source software.\nSource used in this article: https://opensource.com/business/13/6/four-types-organizational-structures-within-open-source-communities\n\nThis article is under construction.\n\n\n\n\n Back to top",
    "crumbs": [
      "All articles",
      "General articles",
      "Software development in open source projects"
    ]
  },
  {
    "objectID": "articles/General/Tools.html",
    "href": "articles/General/Tools.html",
    "title": "Tools",
    "section": "",
    "text": "Tools in Koodariverstas\nThis article acts as a compiled list of different tools we use/recommend using in Koodariverstas. We use different tools for different parts of our work here in Koodariverstas, this means that there are some tools you will have to learn when working in a project inside Koodariverstas. We have also gathered some recommended tools for different use-cases you might want to get to know.\n\nTools we use\n\nTaiga. Taiga is our preferred project management solution we use it to track the progress of projects and it helps everyone keep track of the tasks that are done and need to be done next. Taiga is completely free and open-source. You can read our guide to the usage of Taiga here.\n\n\n\nTools we recommend\n\nVS code. VS-code is a robust IDE that fits almost every need. VS code has a massive library of extensions for almost every development need and want.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "All articles",
      "General articles",
      "Tools"
    ]
  },
  {
    "objectID": "articles/General/Github tutorial.html",
    "href": "articles/General/Github tutorial.html",
    "title": "GitHub in Koodariverstas",
    "section": "",
    "text": "Koodariverstas is a part of Xamk and as a result, all code developed in Koodariverstas should be documented on our GitHub.\nOur GitHub is open to everyone and we encourage you to get to know the repositories/projects we are working on. Even this Wiki is fully hosted through GitHub pages and automated through GitHub actions. All of the source code is available at our repository.\nYour first step is to create your own GitHub account here.\nWhen you have created your GitHub account, you can request access to the GitHub organization through Xinfo.\n\nPlease note: only one member of a team needs to send a request to Xinfo (Read inviting others into a repository from below).\n\n\n\n\nThis is the main page of Xinfo. You want to leave an ICT service request for access to GitHub\n\n\nWhen sending a request to access the organization, please attach your exact GitHub username to the ticket.\n\n\n\nFill your information here. Be sure to add a description where you clearly state requesting access to GitHub\n\n\nWhen you gain access to the organization inside GitHub, you can create your own repositories and invite anyone to collaborate on your own repository. One member inside the organization can directly invite others from outside the organization to collaborate on repositories they own.\n\n\n\nYou can manage access to your repository from the repository access settings.\n\n\nWe hope this helps you begin development in Koodariverstas.\nHappy Coding!",
    "crumbs": [
      "All articles",
      "General articles",
      "GitHub in Koodariverstas"
    ]
  },
  {
    "objectID": "articles/General/Github tutorial.html#guide-on-joining-the-xamk-github-organization",
    "href": "articles/General/Github tutorial.html#guide-on-joining-the-xamk-github-organization",
    "title": "GitHub in Koodariverstas",
    "section": "",
    "text": "Koodariverstas is a part of Xamk and as a result, all code developed in Koodariverstas should be documented on our GitHub.\nOur GitHub is open to everyone and we encourage you to get to know the repositories/projects we are working on. Even this Wiki is fully hosted through GitHub pages and automated through GitHub actions. All of the source code is available at our repository.\nYour first step is to create your own GitHub account here.\nWhen you have created your GitHub account, you can request access to the GitHub organization through Xinfo.\n\nPlease note: only one member of a team needs to send a request to Xinfo (Read inviting others into a repository from below).\n\n\n\n\nThis is the main page of Xinfo. You want to leave an ICT service request for access to GitHub\n\n\nWhen sending a request to access the organization, please attach your exact GitHub username to the ticket.\n\n\n\nFill your information here. Be sure to add a description where you clearly state requesting access to GitHub\n\n\nWhen you gain access to the organization inside GitHub, you can create your own repositories and invite anyone to collaborate on your own repository. One member inside the organization can directly invite others from outside the organization to collaborate on repositories they own.\n\n\n\nYou can manage access to your repository from the repository access settings.\n\n\nWe hope this helps you begin development in Koodariverstas.\nHappy Coding!",
    "crumbs": [
      "All articles",
      "General articles",
      "GitHub in Koodariverstas"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Koodariverstas Wikiplatform",
    "section": "",
    "text": "Welcome to the Wiki!\nThis site will act as your one-stop-shop to all of your needs during development in koodariverstas. Here you can find articles based on general project timeline. These articles will help you get started in your work, and guide you through the development process. You can also use the search located in the top right of the wiki.\nThere are also categories listed in the sidebar of the wiki. Take a look around the general category for more specific information regarding technologies we use. You can also visit the All articles section from here.\nHappy Coding!\n-Koodariverstas staff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeginning a project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDuring a project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnding a project\n\n\n\n\n\n\n\n\nNo matching items\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About koodariverstas",
    "section": "",
    "text": "Our mission is to bridge the gap between education and corporations. We believe that everyone has the right to prove their skills and be recognized for their work, that’s why we want to provide students the opportunity to work in real projects for companies.\nKoodariverstas provides a platform that is beneficial for both companies and students. Our students get the opportunity to gain first hand experience in working with companies and learn the correct ways of working in a professional environment. The companies gain the ability to get their noncritical projects under way faster and with a smaller upfront cost.\nWe have already completed several projects for companies in Eastern-Finland and are constantly looking to provide students the opportunity to prove their determination and knowledge for potential future employers.\nKoodariverstas is co-funded by the European Union and is managed by South-Eastern Finlands University of Applied Sciences (Xamk).",
    "crumbs": [
      "About koodariverstas"
    ]
  },
  {
    "objectID": "about.html#welcome-to-koodariverstas",
    "href": "about.html#welcome-to-koodariverstas",
    "title": "About koodariverstas",
    "section": "",
    "text": "Our mission is to bridge the gap between education and corporations. We believe that everyone has the right to prove their skills and be recognized for their work, that’s why we want to provide students the opportunity to work in real projects for companies.\nKoodariverstas provides a platform that is beneficial for both companies and students. Our students get the opportunity to gain first hand experience in working with companies and learn the correct ways of working in a professional environment. The companies gain the ability to get their noncritical projects under way faster and with a smaller upfront cost.\nWe have already completed several projects for companies in Eastern-Finland and are constantly looking to provide students the opportunity to prove their determination and knowledge for potential future employers.\nKoodariverstas is co-funded by the European Union and is managed by South-Eastern Finlands University of Applied Sciences (Xamk).",
    "crumbs": [
      "About koodariverstas"
    ]
  },
  {
    "objectID": "articles/General/General adding test.html",
    "href": "articles/General/General adding test.html",
    "title": "Adding and Editing pages",
    "section": "",
    "text": "This article will teach you how to add pages and edit existing pages in our Wiki. This might be useful when you want to document your findings or want to add a component you made to the library of components that everyone can freely use.\n\n\nOn every page, you will find the “Edit this page” and “Report an issue” buttons. “Edit this page” lets you edit the current page you are on and “Report an issue” lets you report any issues you might come across.\nIf you are a student “Edit this page” will notify you about the requirement of forking your own branch for modifications. “Report an issue” opens up a new GitHub issue for the team to see.\n\n\n\nGitHub actions on the right navigation bar\n\n\nWhen a page has the integrated navigation bar on the right. The GitHub actions can be found on the bottom of the navigation element.\n\n\n\nEdit this page and Report an issue buttons. These buttons are located at the bottom when no navigation is present\n\n\nIf a site doesn’t have the right navigation element, these buttons can be found in the footer of the page.\n\n\n\nWhen adding a new page to the wiki, head to the GitHub repository (Link located at the top right of the page).\n\n\n\nGithub link location\n\n\nInside the GitHub repository find the “articles” folder. Inside the articles folder find the category folder where you want to add your article. If you want to edit an article instead, simply head to the article you want to edit, and edit the .qmd file of the article.\n\nNote: Please refrain from modifying articles written by other people. If you still think that an article requires modifications, please ask the user in the articles “author” section for permission to modify their work, if you make changes, add yourself to the authors list of the article. You can find other users in the repository user list.\n\n\n\n\nGithub articles folder\n\n\nAfter choosing a folder suitable for your article, you can add a .qmd file directly in GitHub. A .qmd file is automatically formatted and added to the hosted website, they are also sorted by category and inserted into the websites search function.\n\nNote: Quarto MarkDown (.qmd) and regular MarkDown (.md) are different file formats. If you have imported a file from a markdown editor, please make sure to change the file to .qmd before adding it to the wiki.\n\n\n\n\nAdding a file in GitHub. You can either create a new file or import a pre-made .qmd file.\n\n\nTo add a .qmd file simply add .qmd in the file name when finalizing your file (Red box in the image below). When adding content be sure to integrate required metadata from the following code block:\n---\ntitle: \"Example title (This is the title you want the reader to see and \"interact\" with)\"\ncategories: [example category] ## Current categories are: Beginning a project, During a project, Ending a project, General (Categories are case sensitive)\ndate: \"9.25.2024\" ## date and time format is MM.DD.YYYY\nauthor: Firstname Lastname, Firstname Lastname ## Author/authors of the article. \ndate-modified: last-modified ## This adds an automatic last modified field to the article, last-modified function will automatically add the correct date when a modification is made to the article.\ntoc: true ##this adds an automatic Table-Of-Content for your article.\n---\nThe wiki supports full markdown and lets you have total control over the content of your article. We recommend using a simple markdown editor such as StackEdit (You can also read our article on the basics of StackEdit here).\nThe orange area in the image shown below is your “article” section. This section has to include the metadata at the top of the section for the article (Otherwise your article WILL NOT be indexed and won’t be rendered to the wiki)! After you have included the metadata section, you are free to write and format whatever you wish in the main article.\n\nNote: You are responsible for the content you write in your article. It is your responsibility to fact check and reference others work correctly. All articles are moderated and checked for disruptive content before they are published in the wiki.\n\n\n\n\nEditing a file. RED section is your .qmd files name. YELLOW section is the main article section.\n\n\nWhen you feel like your article is ready to publish, simply press the green “Commit Changes” button in github.\nIf you are a part of Koodariverstas staff, you have the permissions to directly push changes to main.\n\nNote: When a staff member is pushing their changes GitHub will give you the option to bypass the rules and push directly to main.\n\n\n\n\nIf you are a student working in a project and want to edit or publish an article, you need to create your own branch for the changes you have made. Your branch will be sent automatically for review when you push your changes. When your changes are approved by an administrator your changes will be automatically updated to the wiki and your branch will be deleted.\nThere are a few ways of managing your branches. Here are two options we recommend for everyone regardless of their technical knowledge and experience with GitHub.\n\n\nWhen adding directly through GitHub you will be prompted when committing to create a new branch for your changes.\n\n\n\nProposing a change in GitHub\n\n\nSelect the “create a new branch” option from the selection. This will make a new branch for your changes and send an automatic request for review for administrators.\n\nNote: You will not be able to commit directly to main as a student. Even if you get the option to commit to main, you will get an error message saying that your commit has been blocked.\n\n\n\n\nAlternatively you can use the GitHub desktop app for creating a new branch. GitHub desktop lets you create and manage you branches directly in the app making it easy to keep track of your branches and changes.\n\n\n\nCreating a branch in GH desktop app\n\n\nGitHub desktop lets you manage your branches and the cloned repository with ease. These are the options we recommend you use when adding or editing content. There are other ways of managing your branches, but these are the ones we recommend for everyone.\nManaging branches directly through VS codes version control is also an option, but we have noticed that VS code has some trouble with sending requests directly to GitHub causing some pull requests to simply never show up to the administrators.\n\nNote: In both cases (Staff and Student) when your push is completed your article will be pushed to the wiki automatically. It will take a minute or two for your article to show up correctly on the web page.",
    "crumbs": [
      "All articles",
      "General articles",
      "Adding and Editing pages"
    ]
  },
  {
    "objectID": "articles/General/General adding test.html#editing-existing-pages-and-reporting-issues.",
    "href": "articles/General/General adding test.html#editing-existing-pages-and-reporting-issues.",
    "title": "Adding and Editing pages",
    "section": "",
    "text": "On every page, you will find the “Edit this page” and “Report an issue” buttons. “Edit this page” lets you edit the current page you are on and “Report an issue” lets you report any issues you might come across.\nIf you are a student “Edit this page” will notify you about the requirement of forking your own branch for modifications. “Report an issue” opens up a new GitHub issue for the team to see.\n\n\n\nGitHub actions on the right navigation bar\n\n\nWhen a page has the integrated navigation bar on the right. The GitHub actions can be found on the bottom of the navigation element.\n\n\n\nEdit this page and Report an issue buttons. These buttons are located at the bottom when no navigation is present\n\n\nIf a site doesn’t have the right navigation element, these buttons can be found in the footer of the page.",
    "crumbs": [
      "All articles",
      "General articles",
      "Adding and Editing pages"
    ]
  },
  {
    "objectID": "articles/General/General adding test.html#adding-a-new-page",
    "href": "articles/General/General adding test.html#adding-a-new-page",
    "title": "Adding and Editing pages",
    "section": "",
    "text": "When adding a new page to the wiki, head to the GitHub repository (Link located at the top right of the page).\n\n\n\nGithub link location\n\n\nInside the GitHub repository find the “articles” folder. Inside the articles folder find the category folder where you want to add your article. If you want to edit an article instead, simply head to the article you want to edit, and edit the .qmd file of the article.\n\nNote: Please refrain from modifying articles written by other people. If you still think that an article requires modifications, please ask the user in the articles “author” section for permission to modify their work, if you make changes, add yourself to the authors list of the article. You can find other users in the repository user list.\n\n\n\n\nGithub articles folder\n\n\nAfter choosing a folder suitable for your article, you can add a .qmd file directly in GitHub. A .qmd file is automatically formatted and added to the hosted website, they are also sorted by category and inserted into the websites search function.\n\nNote: Quarto MarkDown (.qmd) and regular MarkDown (.md) are different file formats. If you have imported a file from a markdown editor, please make sure to change the file to .qmd before adding it to the wiki.\n\n\n\n\nAdding a file in GitHub. You can either create a new file or import a pre-made .qmd file.\n\n\nTo add a .qmd file simply add .qmd in the file name when finalizing your file (Red box in the image below). When adding content be sure to integrate required metadata from the following code block:\n---\ntitle: \"Example title (This is the title you want the reader to see and \"interact\" with)\"\ncategories: [example category] ## Current categories are: Beginning a project, During a project, Ending a project, General (Categories are case sensitive)\ndate: \"9.25.2024\" ## date and time format is MM.DD.YYYY\nauthor: Firstname Lastname, Firstname Lastname ## Author/authors of the article. \ndate-modified: last-modified ## This adds an automatic last modified field to the article, last-modified function will automatically add the correct date when a modification is made to the article.\ntoc: true ##this adds an automatic Table-Of-Content for your article.\n---\nThe wiki supports full markdown and lets you have total control over the content of your article. We recommend using a simple markdown editor such as StackEdit (You can also read our article on the basics of StackEdit here).\nThe orange area in the image shown below is your “article” section. This section has to include the metadata at the top of the section for the article (Otherwise your article WILL NOT be indexed and won’t be rendered to the wiki)! After you have included the metadata section, you are free to write and format whatever you wish in the main article.\n\nNote: You are responsible for the content you write in your article. It is your responsibility to fact check and reference others work correctly. All articles are moderated and checked for disruptive content before they are published in the wiki.\n\n\n\n\nEditing a file. RED section is your .qmd files name. YELLOW section is the main article section.\n\n\nWhen you feel like your article is ready to publish, simply press the green “Commit Changes” button in github.\nIf you are a part of Koodariverstas staff, you have the permissions to directly push changes to main.\n\nNote: When a staff member is pushing their changes GitHub will give you the option to bypass the rules and push directly to main.",
    "crumbs": [
      "All articles",
      "General articles",
      "Adding and Editing pages"
    ]
  },
  {
    "objectID": "articles/General/General adding test.html#adding-and-editing-pages-as-a-student",
    "href": "articles/General/General adding test.html#adding-and-editing-pages-as-a-student",
    "title": "Adding and Editing pages",
    "section": "",
    "text": "If you are a student working in a project and want to edit or publish an article, you need to create your own branch for the changes you have made. Your branch will be sent automatically for review when you push your changes. When your changes are approved by an administrator your changes will be automatically updated to the wiki and your branch will be deleted.\nThere are a few ways of managing your branches. Here are two options we recommend for everyone regardless of their technical knowledge and experience with GitHub.\n\n\nWhen adding directly through GitHub you will be prompted when committing to create a new branch for your changes.\n\n\n\nProposing a change in GitHub\n\n\nSelect the “create a new branch” option from the selection. This will make a new branch for your changes and send an automatic request for review for administrators.\n\nNote: You will not be able to commit directly to main as a student. Even if you get the option to commit to main, you will get an error message saying that your commit has been blocked.\n\n\n\n\nAlternatively you can use the GitHub desktop app for creating a new branch. GitHub desktop lets you create and manage you branches directly in the app making it easy to keep track of your branches and changes.\n\n\n\nCreating a branch in GH desktop app\n\n\nGitHub desktop lets you manage your branches and the cloned repository with ease. These are the options we recommend you use when adding or editing content. There are other ways of managing your branches, but these are the ones we recommend for everyone.\nManaging branches directly through VS codes version control is also an option, but we have noticed that VS code has some trouble with sending requests directly to GitHub causing some pull requests to simply never show up to the administrators.\n\nNote: In both cases (Staff and Student) when your push is completed your article will be pushed to the wiki automatically. It will take a minute or two for your article to show up correctly on the web page.",
    "crumbs": [
      "All articles",
      "General articles",
      "Adding and Editing pages"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html",
    "href": "articles/General/StackEditFormatGuide.html",
    "title": "StackEdit Format guide",
    "section": "",
    "text": "StackEdit is an open source browser based markdown editor. Your display is split between two different views. The panel on the left is your markdown side, where you can write in markdown and use the provided tools to create content, the right side is your preview side that shows you what your content looks like. This article is a modified version of the StackEdit guide document provided in StackEdit.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#create-files-and-folders",
    "href": "articles/General/StackEditFormatGuide.html#create-files-and-folders",
    "title": "StackEdit Format guide",
    "section": "Create files and folders",
    "text": "Create files and folders\nThe file explorer is accessible using the button in left corner of the navigation bar. You can create a new file by clicking the New file button in the file explorer. You can also create folders by clicking the New folder button.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#switch-to-another-file",
    "href": "articles/General/StackEditFormatGuide.html#switch-to-another-file",
    "title": "StackEdit Format guide",
    "section": "Switch to another file",
    "text": "Switch to another file\nAll your files and folders are presented as a tree in the file explorer. You can switch from one to another by clicking a file in the tree.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#rename-a-file",
    "href": "articles/General/StackEditFormatGuide.html#rename-a-file",
    "title": "StackEdit Format guide",
    "section": "Rename a file",
    "text": "Rename a file\nYou can rename the current file by clicking the file name in the navigation bar or by clicking the Rename button in the file explorer.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#delete-a-file",
    "href": "articles/General/StackEditFormatGuide.html#delete-a-file",
    "title": "StackEdit Format guide",
    "section": "Delete a file",
    "text": "Delete a file\nYou can delete the current file by clicking the Remove button in the file explorer. The file will be moved into the Trash folder and automatically deleted after 7 days of inactivity.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#export-a-file",
    "href": "articles/General/StackEditFormatGuide.html#export-a-file",
    "title": "StackEdit Format guide",
    "section": "Export a file",
    "text": "Export a file\nYou can export the current file by clicking Export to disk in the menu. You can choose to export the file as plain Markdown, as HTML using a Handlebars template or as a PDF.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#open-a-file",
    "href": "articles/General/StackEditFormatGuide.html#open-a-file",
    "title": "StackEdit Format guide",
    "section": "Open a file",
    "text": "Open a file\nYou can open a file from Google Drive, Dropbox or GitHub by opening the Synchronize sub-menu and clicking Open from. Once opened in the workspace, any modification in the file will be automatically synced.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#save-a-file",
    "href": "articles/General/StackEditFormatGuide.html#save-a-file",
    "title": "StackEdit Format guide",
    "section": "Save a file",
    "text": "Save a file\nYou can save any file of the workspace to Google Drive, Dropbox or GitHub by opening the Synchronize sub-menu and clicking Save on. Even if a file in the workspace is already synced, you can save it to another location. StackEdit can sync one file with multiple locations and accounts.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#synchronize-a-file",
    "href": "articles/General/StackEditFormatGuide.html#synchronize-a-file",
    "title": "StackEdit Format guide",
    "section": "Synchronize a file",
    "text": "Synchronize a file\nOnce your file is linked to a synchronized location, StackEdit will periodically synchronize it by downloading/uploading any modification. A merge will be performed if necessary and conflicts will be resolved.\nIf you just have modified your file and you want to force syncing, click the Synchronize now button in the navigation bar.\n\nNote: The Synchronize now button is disabled if you have no file to synchronize.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#manage-file-synchronization",
    "href": "articles/General/StackEditFormatGuide.html#manage-file-synchronization",
    "title": "StackEdit Format guide",
    "section": "Manage file synchronization",
    "text": "Manage file synchronization\nSince one file can be synced with multiple locations, you can list and manage synchronized locations by clicking File synchronization in the Synchronize sub-menu. This allows you to list and remove synchronized locations that are linked to your file.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#publish-a-file",
    "href": "articles/General/StackEditFormatGuide.html#publish-a-file",
    "title": "StackEdit Format guide",
    "section": "Publish a File",
    "text": "Publish a File\nYou can publish your file by opening the Publish sub-menu and by clicking Publish to. For some locations, you can choose between the following formats:\n\nMarkdown: publish the Markdown text on a website that can interpret it (GitHub for instance),\nHTML: publish the file converted to HTML via a Handlebars template (on a blog for example).",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#smartypants",
    "href": "articles/General/StackEditFormatGuide.html#smartypants",
    "title": "StackEdit Format guide",
    "section": "SmartyPants",
    "text": "SmartyPants\nSmartyPants converts ASCII punctuation characters into “smart” typographic punctuation HTML entities. For example:\n\n\n\n\n\n\n\n\n\nASCII\nHTML\n\n\n\n\nSingle backticks\n'Isn't this fun?'\n‘Isn’t this fun?’\n\n\nQuotes\n\"Isn't this fun?\"\n“Isn’t this fun?”\n\n\nDashes\n-- is en-dash, --- is em-dash\n– is en-dash, — is em-dash",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#katex",
    "href": "articles/General/StackEditFormatGuide.html#katex",
    "title": "StackEdit Format guide",
    "section": "KaTeX",
    "text": "KaTeX\nYou can render LaTeX mathematical expressions using KaTeX:\nThe Gamma function satisfying \\(\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N\\) is via the Euler integral\n\\[\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n\\]\n\nYou can find more information about LaTeX mathematical expressions here.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/StackEditFormatGuide.html#section",
    "href": "articles/General/StackEditFormatGuide.html#section",
    "title": "StackEdit Format guide",
    "section": "",
    "text": "This document is directly based on the original StackEdit welcome guide found in every new StackEdit document. XAMK is not affiliated with StackEdit and has no connections to the team developing StackEdit. StackEdit is an open source project licensed under the apache 2.0 license.",
    "crumbs": [
      "All articles",
      "General articles",
      "StackEdit Format guide"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html",
    "href": "articles/General/Taiga.html",
    "title": "Guide to Taiga.io",
    "section": "",
    "text": "Taiga.io Logo\n\n\n\n\nTaiga.io is our preferred project management tool. Taiga is fully open-source and has a generous & unlimited free tier. Taiga also offers the ability to self host a taiga instance on your own machines, we use taiga to manage the projects students are working on in Koodariverstas.\nWe recommend that you get to know the platform and its layout when you begin working in your first project.\n\n\n\nTaiga has multiple ways of logging-in, we recommend using the same GitHub account you use in your projects in Koodariverstas. This makes it easy to attribute changes and credit directly to you when the names on both platforms are identical.\nYou can sign in with GitHub directly through the login prompt.\n\n\n\nTaiga.io Login window\n\n\nAfter logging in you can head to the account settings and change your profile picture, name, and password. You can also directly download your account information or fully delete your account from the account settings.\nWhen entering names please use your real legal names so that we know who is who when attributing work and credits.\n\n\n\nWhen you login you are thrown directly into the “projects” view. This view will show you the projects you have created or collaborate on. You can view and manage all your projects from this view.\nThe project view lets you quickly see the issues you are working on and the tasks you are following that are being assigned to others.\n\n\n\nThis is your project view.\n\n\nThis page will help you understand the current to-do on a glance. You can follow others issues and coordinate your work with others and their timelines. If you don’t currently have any projects when logging in, this page will let guide you through creating a new project or joining a existing project.\n\n\n\n\n\nWhen clicking on a project you will find a page that looks like this. Here you can see the team assigned to the project, action history, scrum and kanban, project wiki and current Issues.\n\n\n\nScrum is a standard way to follow and plan development processes.\nTaiga has a fully functional scrum management system that lets you follow tasks and check assigned workflows.\nHere you can see which tasks are allocated to you or other members in your team. You can also track the progress of all tasks here.\n\n\n\n\n\nDifferent tasks require different amounts of work and resources. Scrum let’s us assign the correct resources per task and track their progress in real time.\nThis also helps developers stay focused on their own work, and eases the workload of big projects by cutting it to bite sized bits.\n\nTL;DR: Scrum makes it easy to follow smaller tasks and assign resources to said tasks. Enabling developers to focus on their own tasks.\n\n\n\n\nKanban works in the same manner as scrum, the difference being that kanban focuses on the “bigger picture”. Where scrum concentrates on tasks as a part of a bigger picture, kanban focuses more on user stories. User stories are bigger sized entities that consist of the smaller scrum tasks.\nYou can think of it as a poster, where different parts of the whole poster consists of smaller parts of the poster to make a complete comprehensive poster.\n\n\n\n\n\nThis is the kanban view. Each user story consists of tasks that are managed in Scrum. When work is started on a task that is a part of a story, the story is updated to reflect the changes.\n\n\n\n\n\nHere for example, I have “started working” on a task in user story 1. I have been assigned to the development to tasks for story 1. To reflect this change I have updated the kanban view to reflect the current state of the entire story.\n\nTL;DR: Kanban enables the following of the bigger picture of the project. This helps in planning for bigger features and keeping track of the entire project.\n\n\n\n\nTaiga has also a built in issues system. We use this to track known issues such as bugs, problems, requests or additional requirements. You can see all the current issues on the projects issues page.\nThe issues page shows you the Type, Severity and priority of the issue listed. You can also see the status, when the issue was posted and who it’s assigned to.\n\n\n\n\n\nThis is the issues page, you can search issues by subject or reference. Here you can also add new issues and see the overall state of issues in the current project.\nWhen you click on an issue, it will open the detailed issue page.\n\n\n\n\n\nThis is the detailed issue page. Here you can see the description of the issue including the status, assigned personnel, possible attachments and comments made by other people in the project.\nUsage of issues helps everyone keep track of the problems that may occur during development.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#what-is-taiga.io",
    "href": "articles/General/Taiga.html#what-is-taiga.io",
    "title": "Guide to Taiga.io",
    "section": "",
    "text": "Taiga.io is our preferred project management tool. Taiga is fully open-source and has a generous & unlimited free tier. Taiga also offers the ability to self host a taiga instance on your own machines, we use taiga to manage the projects students are working on in Koodariverstas.\nWe recommend that you get to know the platform and its layout when you begin working in your first project.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#account-management",
    "href": "articles/General/Taiga.html#account-management",
    "title": "Guide to Taiga.io",
    "section": "",
    "text": "Taiga has multiple ways of logging-in, we recommend using the same GitHub account you use in your projects in Koodariverstas. This makes it easy to attribute changes and credit directly to you when the names on both platforms are identical.\nYou can sign in with GitHub directly through the login prompt.\n\n\n\nTaiga.io Login window\n\n\nAfter logging in you can head to the account settings and change your profile picture, name, and password. You can also directly download your account information or fully delete your account from the account settings.\nWhen entering names please use your real legal names so that we know who is who when attributing work and credits.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#projects",
    "href": "articles/General/Taiga.html#projects",
    "title": "Guide to Taiga.io",
    "section": "",
    "text": "When you login you are thrown directly into the “projects” view. This view will show you the projects you have created or collaborate on. You can view and manage all your projects from this view.\nThe project view lets you quickly see the issues you are working on and the tasks you are following that are being assigned to others.\n\n\n\nThis is your project view.\n\n\nThis page will help you understand the current to-do on a glance. You can follow others issues and coordinate your work with others and their timelines. If you don’t currently have any projects when logging in, this page will let guide you through creating a new project or joining a existing project.\n\n\n\n\n\nWhen clicking on a project you will find a page that looks like this. Here you can see the team assigned to the project, action history, scrum and kanban, project wiki and current Issues.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#scrum",
    "href": "articles/General/Taiga.html#scrum",
    "title": "Guide to Taiga.io",
    "section": "",
    "text": "Scrum is a standard way to follow and plan development processes.\nTaiga has a fully functional scrum management system that lets you follow tasks and check assigned workflows.\nHere you can see which tasks are allocated to you or other members in your team. You can also track the progress of all tasks here.\n\n\n\n\n\nDifferent tasks require different amounts of work and resources. Scrum let’s us assign the correct resources per task and track their progress in real time.\nThis also helps developers stay focused on their own work, and eases the workload of big projects by cutting it to bite sized bits.\n\nTL;DR: Scrum makes it easy to follow smaller tasks and assign resources to said tasks. Enabling developers to focus on their own tasks.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#kanban",
    "href": "articles/General/Taiga.html#kanban",
    "title": "Guide to Taiga.io",
    "section": "",
    "text": "Kanban works in the same manner as scrum, the difference being that kanban focuses on the “bigger picture”. Where scrum concentrates on tasks as a part of a bigger picture, kanban focuses more on user stories. User stories are bigger sized entities that consist of the smaller scrum tasks.\nYou can think of it as a poster, where different parts of the whole poster consists of smaller parts of the poster to make a complete comprehensive poster.\n\n\n\n\n\nThis is the kanban view. Each user story consists of tasks that are managed in Scrum. When work is started on a task that is a part of a story, the story is updated to reflect the changes.\n\n\n\n\n\nHere for example, I have “started working” on a task in user story 1. I have been assigned to the development to tasks for story 1. To reflect this change I have updated the kanban view to reflect the current state of the entire story.\n\nTL;DR: Kanban enables the following of the bigger picture of the project. This helps in planning for bigger features and keeping track of the entire project.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#issues",
    "href": "articles/General/Taiga.html#issues",
    "title": "Guide to Taiga.io",
    "section": "",
    "text": "Taiga has also a built in issues system. We use this to track known issues such as bugs, problems, requests or additional requirements. You can see all the current issues on the projects issues page.\nThe issues page shows you the Type, Severity and priority of the issue listed. You can also see the status, when the issue was posted and who it’s assigned to.\n\n\n\n\n\nThis is the issues page, you can search issues by subject or reference. Here you can also add new issues and see the overall state of issues in the current project.\nWhen you click on an issue, it will open the detailed issue page.\n\n\n\n\n\nThis is the detailed issue page. Here you can see the description of the issue including the status, assigned personnel, possible attachments and comments made by other people in the project.\nUsage of issues helps everyone keep track of the problems that may occur during development.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#customer-feedback-form-in-project",
    "href": "articles/General/Taiga.html#customer-feedback-form-in-project",
    "title": "Guide to Taiga.io",
    "section": "Customer feedback form in Project",
    "text": "Customer feedback form in Project\nVersion history. Only major edits listed here\n\n\n\n\n\n\n\n\n\nVersion\nDate\nCreator\nContent\n\n\n\n\n0.1\ndd.mm.yyyy\nO. O.\nFirst draft\n\n\n0.2\ndd.mm.yyyy\nO. O.\nAll chapters. Sent for review.\n\n\n0.9\ndd.mm.yyyy\nO. O.\nTweaks based on Company feedback, ready for approval\n\n\n1.0\ndd.mm.yyyy\nO. O.\nCompany approved\n\n\n\n\nGeneral\nPurpose of the project and objective(s)\nThis project was initiated because Company X adopted the ISO 9001 quality management system. As part of this system, customer feedback is an essential tool for improving service quality and maintaining customer loyalty and so on…..\nThis project aims to create a customer feedback form that is easy to find and seamless to fill out. The form will include questions designed to meet CSAT (Customer Satisfaction) metrics, while also providing space for open feedback. Additionally, customers will have the option to provide their contact information, along with their preferred time and method for personal follow-up …and so on\n\n\nTerminology\n\n\n\n\n\n\n\nTerm\nExplanation\n\n\n\n\nCSAT\nCustomer satisfaction score. It is a commonly used metric that indicates how satisfied customers are with a company’s products or services.\n\n\nIt’s measured through customer feedback and expressed as a percentage (best 100% to worst 0%).\n\n\n\n\n\n\nProject scope\nThe project scope is:\n\nDesign and development of the feedback form.\nTesting and validation to ensure all requirements.\nImplementation of the form on the company’s website or other relevant platforms.\nWritten instructions how to use, manage and maintain the feedback form.\n\nOut of the scope are:\n\nDeveloping any other customer service feedback tools (such as reporting for the form, CRM integration, chat boxes, etc.).\nMaintaining or redesigning Company’s web page\nThis means that the Company is responsible to add the link to the web page or other relevant places\n\n\n\nSchedule\nProject start date - Project end date\nMajor milestones:\n\nSpecification ready dd.mm.yyyy\nImplementation ready dd.mm.yyyy\nRollout day dd.mm.yyyy\n\n\n\nResources\nPersonnel: Who does what?\nN. N., Company X, Title\n\nRole in the project\nIs responsible for….\n\nM. M., Company X, Title\n\nRole in the project\nIs responsible for….\n\nO. O., Student\n\nRole in the project\nIs responsible for….\n\nP. P., Student\n\nRole in the project\nIs responsible for….\n\nTools and services:\n\nFor development\nVisual Studio Code (free)\nMicrosoft SQL Server Management Studio (SSMS) (free)\nCommunication\nZoom, teams, emails\nTaiga.io\nDocumentation\nCompany’s Google drive\nTaiga.io\nMiro (for diagrams)\n\n\n\nRisk Management\nTop 3 (to 5) risks\n\nrange is high - medium - low for impact and likelihood\n\n\n\n\n\n\n\n\n\n\nRisk\nImpact\nLikelihood\nMitigation plan\n\n\n\n\nDelays on project schedule\nHigh\nMedium\nSet more realistic schedule and deadlines.\n\n\nChosen technology is not suitable\nHigh\nLow\nChange more suitable technology. Will most likely delay the schedule.\n\n\nChosen technology is too difficult\nMedium\nLow\nMore training and support from the Teachers\n\n\n\nWays to reduce risks are:\n\nRisks will be monitored regularly\nSchedule is flexible by default\nActive communication between the project participants\n\n\n\nCommunication Plan\n\nMajority of the meetings and workshops are planned to the Work Plan in advance\nReporting to Koodariverstas and Teachers regularly\nand all other relevant communication actions\n\n\n\nMonitoring and Evaluation\n\nAll follow-up checkpoints are integrated into the Work Plan.\nKoodariverstas will monitor the project in accordance with the Koodariverstas assignment process.\n\nAchievement of objectives will be evaluated against the project’s Work Plan.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#work-plan",
    "href": "articles/General/Taiga.html#work-plan",
    "title": "Guide to Taiga.io",
    "section": "Work plan",
    "text": "Work plan\nThis is a detailed work plan how the project will actually meet it’s objectives. Which tools, technologies, etc. It uses. How and by whom the testing is done and so on…\n\nUsed tools and technology\n\nDevelopment tools\nVersion control\nWhat database to use\n\n\n\nEnvironments\nDevelopment environment is…\n\nWhere is it and how to access it\n\nTesting environment\n\nWhere is it and how to access it\n\n\n\nSchedule\nPlanning phase\nmm.dd - mm.dd\nObjectives:\n\nThere will be at least 3 workshops\nFinal documentation approved by mm.dd.yyyy\nUser stories with tentative task list approved by mm.dd.yyyy\nTechnology and tools are chosen\nWork plan is updated\n\nImplementation phase\nmm.dd - mm.dd\nObjectives:\n\nDevelopment / testing environments are available by dd.mm.yyyy\nSprints are planned with detailed task lists\nEach sprint will have their own deadlines dates\nWork plan (this document) is approved dd.mm.yyyy\nThis document will be updated and re-approved if necessary (if there arfe any major changes)\nVersion which is ready for acceptance testing dd.mm.yyyy\n\nDeployment phase\nmm.dd - mm.dd\nObjectives:\n\nAcceptance testing done by dd.mm.yyyy\nInstallation dd.mm.yyyy\n\n\n\nWorkshops\n\n\n\n\n\n\n\n\n\nNumber\nDate\nParticipants\nSubject(s)\n\n\n\n\n1\nmm.dd.yyy\nList of necessary persons\nGeneral information, Basic requirements\n\n\n2\nmm.dd.yyy\nList of necessary persons,\nGraphical design requirements, Mandatory and optional fields\n\n\n3\n\n\n\n\n\n\n\n\nFollow-up\nPlanning\n\nWorkshop meetings are also follow-up meetings\nAt the beginning of each workshop the previous tasks, questions, possible documentation is checked over.\n\nImplementation\n\nWeekly meeting\nProgress and plans\nWhat was done\nWhat will be done\nOpen questions\nTask list\nIssues list\nAny other relevant information\n\n\n\nDevelopment process\nDescription about the process\nMore detailed information about the sprints, how, when and by whom the sprints are created\n\n\nSprints\n\nBasic scenario: Functional feedback form with few fields\nAdd the rest of the fields, email responses, etc.\nAdd Brand layout, fine tuning\nFixes and update (only if needed)\n\n\nBased on Company’s feedback after installation\nIs something was left out from the main sprints, it will be done in this sprint\n\n\n\nTesting\n\nUnit testing done by the students as a part of the development process\nEach sprint is tested by the Customer and must be approved before the next sprint\nAcceptance testing\nHow, who and in which environment?\nIssues list cannot have any unsolved critical issues\n\nAny observation and defects are listed in the Issues (Taiga.io)\n\n\nDeployment\nFill this information based on you project\nInstallation date and time: dd.mm.yyyy\n\nPrerequisites\nWhat is needed for the application to be installed\n\nAcceptance testing is successful\nThe production environment is available and accessible\nApplication server\nDatabase\nWhat ever is needed…?\nWho will test the connection, accounts, etc.\nPost notice about the installation a week before the installation day\nWho needs the information that the site is down?\nWho will be responsible posting?\nContent\nand so on\n\n\n\nInstallation schedule\n\nPut the web page in a maintenance state\nWho will do it\n8.00 - 8.30 (give a time frame)\nInstallation of the feedback form\nWho will do it\n8.30-9.00\nInstallation testing\nWho will do it?\n9.00-9.30\nOpen the web site\nPost notice that the site is up and running\n\n\n\nResponsible persons\n\nISP Host technical support: Name, phone\nCustomer\nN. N.. phone\nN. M., phone\nStudents\nName, phone\nAny other essential contact person & phone\n\n\n\nCommunication\n\nNormal communication is done by email\nEmergency communication is done by phone\nEach participant is invited to the Company’s Slack channel,\nSlack channel is used on normal communication\nEmergency communication is done by phone and posted to the Slack channel\n\n\n\nRollback plan\nin case something goes wrong\n\nInfo: For smaller project this page may be enough, but if it is not, you can create new wiki pages, or link external document or add attachments in the Taiga Wiki.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#requirement-specification-for-online-feedback-form",
    "href": "articles/General/Taiga.html#requirement-specification-for-online-feedback-form",
    "title": "Guide to Taiga.io",
    "section": "Requirement Specification for Online Feedback Form",
    "text": "Requirement Specification for Online Feedback Form\n\nRequirements list\n\nBusiness requirements\n\n\n\n\n\n\n\n\n\nID\nTitle\nPriority\nState\n\n\n\n\nBR 1\nCustomers can give feed back easily\nMandatory\nApproved\n\n\nBR2\nFeedback back form will strengthen Company’s brand\nMandatory\nApproved\n\n\nBR 3\nCompany can have simple access to analyze given data\nMandatory\nApproved\n\n\nBR 4\nThe results must be measurable using CSAT/NPS/CES\nMandatory\nApproved\n\n\n\n\n\nFunctional requirements\n\n\n\n\n\n\n\n\n\nID\nTitle\nPriority\nState\n\n\n\n\nFR 1\nSubmit the form anonymously, or optionally with contact information\nMandatory\nApproved\n\n\nFR 2\nThe form must be responsive and work seamlessly on various devices\nMandatory\nApproved\n\n\nFR 3\nMultilingual (mandatory FIN, SWE, ENG languages)\nMandatory\nApproved\n\n\nFR 4\nBasic form fields are in use and can be mandatory (marked with *) or optional\nMandatory\nApproved\n\n\nFR 5\nAutomatic email response\nMandatory\nApproved\n\n\nFR 6\nIntegrate with our CRM\nOptional\nNew\n\n\n\n\n\nOther requirements\n\n\n\nID\nTitle\nPriority\nState\n\n\n\n\nOR 1\nMust follow our ISO 9001 standard\nMandatory\nApproved\n\n\nOR 2\nMust be GDPR compliance\nMandatory\nApproved\n\n\nOR 3\nMust follow WCAG guidelines\nModerate\nApproved\n\n\nOR 4\nMust follow your Brand guidelines\nMandatory\nApproved\n\n\n\n\n\n\nRequirements\nMore detailed information about each requirement /OR Extend the tables above\n\nFR 1 Submit the form anonymously, or optionally with contact information\nThe customer must be able to fill the feedback form anonymously but if needed the customer can give their contact information: Name, phone and email-address, also preferably choice of contact method and time.\nLinks to other requirements:\n\nOR 1\nOR 2\n\nRoles: the customer\n\n\n\nUser Personas\n\nMeet Customer Matti, who has opinions about the services they use\nMeet Customer service person Saara, who read sand responds to all customer feedbacks\nMeet Business analytics Kaisa, who wants to have metrics about the feedback, so the Company can improve improve business\nMeet Developer Myrsky, who is responsible for developing the feedback form\n\n\n\nUser stories\n\nUser Story 1: As a Customer, I want to give feedback easily so that my opinions can help improve the service.\nUser Story 2: As a Business analytics, I want to have a report of the feedbacks, so I can analyze the data effectively.\nUser Story 3: As a developer, I want the form to be responsive so that it works on all devices.\nUser Story 4: As a customer service person, I want to receive notifications of new feedback so that I can respond prompt\n\n\nNote: As an example user stories 1 and 3 are expanded to the Backlog",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/Taiga.html#workshops-1",
    "href": "articles/General/Taiga.html#workshops-1",
    "title": "Guide to Taiga.io",
    "section": "Workshops",
    "text": "Workshops\nThis is an example of a plan for a workshop. If you plan on having a workshop, you can use the information below as a template when filling in information of your workshop.\n\nDate:\ndd.mm.yyyy at 10.00 - 11.30\n\n\nParticipants:\nN. N., Company X, title or role\nM. M., Company X, title or role\nO. O., Student, role in the project\nP. P., Student, role in the project\n\n\nSubjects:\n\nCompany and Students introduction\nChecking that everybody has access the collaboration area & other relevant recourses/ services etc.\n(Open questions & task check here, after this first workshop)\nPurpose of the Customer feedback form\nWhy the feedback form is needed\nUser groups and their roles\nMetrics used for the feedback form\nHow the data should be stored\nGDRP checklist, Company’s privacy policy, or any other rules, and regulations?\nIs there changes to next workshop (as a result of this workshop)?\n\n\n\nMeeting notes\n\nNote: the information from the above bullet list is written here\n\n\n\nOpen questions & tasks:\n\n\n\n\n\n\n\n\nTask\nResponsible person\nDue date\n\n\n\n\nWhat is the Company’s privacy policy and GDPR\nN. N.\nTomorrow\n\n\nThis is going to change the privacy statement, find out who is responsible to do so, and update public web page\nM. M.\nBefore next workshop\n\n\nInvite M. M. to taiga.io\nO. O.\nTomorrow\n\n\n\n\n\nNext Workshop:\n\nxx.yy.yyyy\nChanges to be made\nDate, time, subjects, participant, etc.",
    "crumbs": [
      "All articles",
      "General articles",
      "Guide to Taiga.io"
    ]
  },
  {
    "objectID": "articles/General/opensource.html",
    "href": "articles/General/opensource.html",
    "title": "Open-Source projects",
    "section": "",
    "text": "We believe in the importance of open-source software in the future of software development. Open-source projects give everyone a chance to get involved in software development regardless of their social status or country of origin. A typical open-source project consists of three major pillars. We will dive deeper into the depths of open-source in this article. There are also\n\n\n\nAccess to all: By their very nature, open-source projects are always publicly available to see for everyone interested. For a project to be considered an open-source project the majority of its code and resources are to be made publicly available for everyone to see and study.\nCommunities: Open-source projects live and die by their communities. Many open-source communities consist of people from every walk of life and every country on the planet. For example: some projects might be managed by industry professionals, and developed in co-operation with hobbyist programmers from around the world.\nLicenses and agreements: Open-source projects use generous licenses with a few key restrictions to make sure that the derivative works are also kept open to everyone. The most common open-source licenses are GPL and Apache 2. These two licenses give everyone the right to do whatever they want with the software developed in the community. Both of these licenses emphasize that any derivative work retains its open nature, but their direct approach differs quite a bit.\n\n\nWe have also compiled some free courses for anyone interested in open-source. You need to register for an edufication account, but the courses themselves are free.\n\nCourse 1: Fundamentals of open-source\nCourse 2: Open-source licensing\nCourse 3: Open-source business models\nCourse 4: Open-source communities and networks\nCourse 5: Software development in open-source projects\nCourse 6: Open-source solutions for small to medium enterprises\nThis article is under construction. More content will be added at a later date.",
    "crumbs": [
      "All articles",
      "General articles",
      "Open-Source projects"
    ]
  },
  {
    "objectID": "articles/General/opensource.html#pillars-of-open-source",
    "href": "articles/General/opensource.html#pillars-of-open-source",
    "title": "Open-Source projects",
    "section": "",
    "text": "Access to all: By their very nature, open-source projects are always publicly available to see for everyone interested. For a project to be considered an open-source project the majority of its code and resources are to be made publicly available for everyone to see and study.\nCommunities: Open-source projects live and die by their communities. Many open-source communities consist of people from every walk of life and every country on the planet. For example: some projects might be managed by industry professionals, and developed in co-operation with hobbyist programmers from around the world.\nLicenses and agreements: Open-source projects use generous licenses with a few key restrictions to make sure that the derivative works are also kept open to everyone. The most common open-source licenses are GPL and Apache 2. These two licenses give everyone the right to do whatever they want with the software developed in the community. Both of these licenses emphasize that any derivative work retains its open nature, but their direct approach differs quite a bit.\n\n\nWe have also compiled some free courses for anyone interested in open-source. You need to register for an edufication account, but the courses themselves are free.\n\nCourse 1: Fundamentals of open-source\nCourse 2: Open-source licensing\nCourse 3: Open-source business models\nCourse 4: Open-source communities and networks\nCourse 5: Software development in open-source projects\nCourse 6: Open-source solutions for small to medium enterprises\nThis article is under construction. More content will be added at a later date.",
    "crumbs": [
      "All articles",
      "General articles",
      "Open-Source projects"
    ]
  },
  {
    "objectID": "articles/Ending-a-project/Gathering feedback.html",
    "href": "articles/Ending-a-project/Gathering feedback.html",
    "title": "Gathering and receiving feedback",
    "section": "",
    "text": "Process of gathering feedback\nAfter you have completed a project it’s time to start looking for improvements for the future! We encourage the process of collecting and learning from all feedback, this ensures that you always keep improving as a developer. The general process of gathering feedback is mainly split in three different parts.\n\nSelf reflection: Koodariverstas will ask you to write your own honest thoughts about the work you have done. Mainly we want to get you to think about your future aspects and goals. How did you feel during the process, was there something you liked than you expected or disliked more than expected. What thoughts came up during your work? Would you see yourself doing the same kind of work in the future? What was especially challenging in your work? What did you find the easiest? These questions are strictly for your self improvement, and will not affect your certificates or recommendations. This information is not shared to the company you worked with.\nCompany feedback: Koodariverstas will gather feedback from the company you worked with. This information is related to your overall performance from the company’s perspective. This information will help Koodariverstas understand the overall quality and amount of work done. The company is also asked to provide their honest thoughts about your work ethics and commitment. This information will help us solve any disparities of problems between you and the company you worked with. This information is shared between all three parties in the case where major disparities between both parties are discovered.\nProcess feedback: This feedback is purely internal to Koodariverstas and is used to improve our practices and methods. This information is gathered from you and the company you worked for. This information includes feedback on processes, guidance, management and ease of communication. This information is not relevant to anyone else outside Koodariverstas since it’s purely used for improving the core workflow of Koodariverstas\n\n\n\nProcess of reflecting on feedback\nAfter all the relevant feedback (Positive and Negative) has been gathered it’s time to start reflecting on the feedback received. Sometimes the feedback might be overly positive or overly negative without any real constructive elements to it. In those cases it’s best to think about the reasons why this feedback was written and not over analyze the feedback itself.\nEasiest way reflect on feedback given is to sum everything up into a document with all the positives and negatives listed. This makes it easier to get a full picture of work done.\nDon’t get stuck thinking that only perfection is acceptable, because that isn’t simply true. We live in a imperfect world filled with imperfect people, everyone has their own strengths and weaknesses.\nThese are some of the methods you can use when combing through feedback you have received.\n\nIf the feedback consists of more positive aspects than negative it’s best to focus more on the negative aspects when reflecting for the future. Finding out that you did a mostly good job with some improvements is a great position to be in. It lets you focus on being even better by reducing the negative points in the future.\nIf the majority of the feedback received is negative with a few positives. It’s best to focus on what you did well and find ways to implement your positive traits to your negative traits. For example if you got a positive mark for pure coding and technical implementation but negative marks on reporting your work and readability of your code, you could try to start implementing more detailed comments to your code itself and writing your reports based of the comments you already made in the code.\n\nThis article is under construction. Awaiting for more content\n\n\n\n\n Back to top",
    "crumbs": [
      "All articles",
      "Ending a project",
      "Gathering and receiving feedback"
    ]
  },
  {
    "objectID": "articles/Ending-a-project/index.html",
    "href": "articles/Ending-a-project/index.html",
    "title": "Ending a project",
    "section": "",
    "text": "You have finally reached the goal and the development is done! Congratulations on seeing it through with us!\nNow that all the hard work is done it’s time to check on the client and gather that sweet data.\nFeedback helps you develop as a professional, and lets you learn from your past work. Reflecting on ones work is the key to improvement after all!\nHere you will find the last steps you should take when wrapping up!\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n\n\n\n\n\n\n\n\nGathering and receiving feedback\n\n\n\nEnding a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nNov 13, 2024\n\n\n\n\n\n\n\n\n\n\n\nFilling in your ending information\n\n\n\nEnding a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nFeb 18, 2025\n\n\n\n\n\n\nNo matching items\n Back to top",
    "crumbs": [
      "All articles",
      "Ending a project"
    ]
  },
  {
    "objectID": "articles/During-a-project/Modular-and-Reusable-code.html",
    "href": "articles/During-a-project/Modular-and-Reusable-code.html",
    "title": "Modular & Reusable code",
    "section": "",
    "text": "Modular code is structured into independent, self-contained modules or components. Each module focuses on a specific functionality or a coherent set of responsibilities.\n\n“A module is a discrete unit of functionality that can be easily replaced or updated independently.” – (Conceptual Summary)\n\n\n\n\n\nSeparation of Concerns: Each module addresses a single responsibility, making the code easier to understand and modify.\n\nMaintainability: Isolating functionality means changes in one module are less likely to break other parts of the system.\n\nParallel Development: Different team members can work on separate modules simultaneously, reducing merge conflicts and boosting productivity.\n\nScalability: Modular systems can more easily integrate new features or scale existing ones without massive rewrites.",
    "crumbs": [
      "All articles",
      "During a project",
      "Modular & Reusable code"
    ]
  },
  {
    "objectID": "articles/During-a-project/Modular-and-Reusable-code.html#before-monolithic-logic",
    "href": "articles/During-a-project/Modular-and-Reusable-code.html#before-monolithic-logic",
    "title": "Modular & Reusable code",
    "section": "Before: Monolithic Logic",
    "text": "Before: Monolithic Logic\npublic class SalesReportGenerator\n{\n    // This class tries to do everything: fetch data, calculate results, format the report, etc.\n    \n    public string GenerateMonthlySalesReport(int month, int year)\n    {\n        // 1. Fetch sales data from the database\n        // ...\n        \n        // 2. Calculate totals, averages, etc.\n        // ...\n        \n        // 3. Create a PDF/HTML string or other report format\n        // ...\n        \n        // 4. Possibly email or print the report?\n        // ...\n        \n        return \"MonolithicReportString\";\n    }\n}\nObservations:\n- The single SalesReportGenerator tries to handle data retrieval, business logic (calculations), and formatting.\n- Hard to reuse parts of this logic (e.g., if another part of the system needs just the calculation or formatting logic).\n- If you want to generate a different type of report (e.g., yearly, weekly), you’d likely replicate or rewrite large parts of the method.",
    "crumbs": [
      "All articles",
      "During a project",
      "Modular & Reusable code"
    ]
  },
  {
    "objectID": "articles/During-a-project/Modular-and-Reusable-code.html#after-modular-and-reusable-approach",
    "href": "articles/During-a-project/Modular-and-Reusable-code.html#after-modular-and-reusable-approach",
    "title": "Modular & Reusable code",
    "section": "After: Modular and Reusable Approach",
    "text": "After: Modular and Reusable Approach\n// 1. Data Access Layer or Repository\npublic interface ISalesRepository\n{\n    IEnumerable&lt;Sale&gt; GetSales(int month, int year);\n}\n\n// 2. Service/Business Logic Layer\npublic class SalesCalculator\n{\n    public SalesSummary CalculateSalesSummary(IEnumerable&lt;Sale&gt; sales)\n    {\n        // Perform sums, averages, totals\n        decimal total = sales.Sum(s =&gt; s.Amount);\n        int count = sales.Count();\n        decimal average = count &gt; 0 ? total / count : 0;\n        \n        return new SalesSummary(total, average, count);\n    }\n}\n\n// 3. Formatting/Presentation Layer\npublic interface IReportFormatter\n{\n    string Format(SalesSummary summary);\n}\n\npublic class HtmlReportFormatter : IReportFormatter\n{\n    public string Format(SalesSummary summary)\n    {\n        return $@\"\n            &lt;html&gt;\n            &lt;body&gt;\n                &lt;h1&gt;Sales Report&lt;/h1&gt;\n                &lt;p&gt;Total Sales: {summary.Total}&lt;/p&gt;\n                &lt;p&gt;Number of Transactions: {summary.Count}&lt;/p&gt;\n                &lt;p&gt;Average Sale Amount: {summary.Average}&lt;/p&gt;\n            &lt;/body&gt;\n            &lt;/html&gt;\";\n    }\n}\n\n// 4. High-Level Orchestration\npublic class ReportGenerator\n{\n    private readonly ISalesRepository _salesRepository;\n    private readonly SalesCalculator _salesCalculator;\n    private readonly IReportFormatter _formatter;\n\n    public ReportGenerator(\n        ISalesRepository salesRepository,\n        SalesCalculator salesCalculator,\n        IReportFormatter formatter)\n    {\n        _salesRepository = salesRepository;\n        _salesCalculator = salesCalculator;\n        _formatter = formatter;\n    }\n\n    public string GenerateMonthlyReport(int month, int year)\n    {\n        // Fetch\n        var salesData = _salesRepository.GetSales(month, year);\n\n        // Calculate\n        var summary = _salesCalculator.CalculateSalesSummary(salesData);\n\n        // Format\n        return _formatter.Format(summary);\n    }\n}\nImprovements:\n- Data Retrieval: Handled by ISalesRepository and its implementations (e.g., EF Core, in-memory, etc.).\n- Business Logic: SalesCalculator focuses solely on calculations.\n- Formatting: Defined via an interface IReportFormatter, which can have multiple implementations (HTML, PDF, CSV, etc.).\n- Orchestration: ReportGenerator simply coordinates these modules.\n- Reusability:\n- SalesCalculator can be reused in other reports or contexts needing sales sums/averages.\n- HtmlReportFormatter can be swapped out for a different formatter if needed.\n- Modularity: Changes to one part (e.g., how sales are formatted) don’t break the others.",
    "crumbs": [
      "All articles",
      "During a project",
      "Modular & Reusable code"
    ]
  },
  {
    "objectID": "articles/During-a-project/Readability-and-Maintainability.html",
    "href": "articles/During-a-project/Readability-and-Maintainability.html",
    "title": "Readability & Maintainability",
    "section": "",
    "text": "Readability\n\nDefinition\nReadability refers to how easy it is for a person to read and understand a piece of source code. Readable code is clear, concise, and well-organized. It should convey its intention (the “what” and “why”) without forcing readers to decipher unnecessarily complex or obscure constructs.\n\n“Code is read much more often than it is written.” – Guido van Rossum\n\n\n\nWhy It Matters\n\nCollaboration: Multiple developers (and future you) will need to read and modify the code. Readable code fosters better teamwork and reduces ramp-up time.\n\nBug Reduction: When code’s logic is transparent and straightforward, misunderstandings and errors are less likely.\n\nMaintainability: Readable code is the first step toward easy maintenance. If you can’t understand it, you can’t effectively fix or enhance it.\n\n\n\nExample in C\n\nBefore (Poor Readability)\npublic int CmpStrs(string a, string b)\n{\n    // This method returns 1 if a is \"larger\", -1 if b is \"larger\", or 0 if they are equal\n    if (a.Length == b.Length)\n    {\n        return 0;\n    }\n    else if (a.Length &gt; b.Length)\n    {\n        return 1;\n    }\n    else\n    {\n        return -1;\n    }\n}\n\nWhat’s wrong?\n\nThe method name CmpStrs is cryptic (hard to guess it compares string lengths).\n\nThe comment clarifies the method’s purpose, but the code itself doesn’t telegraph what or why without reading the comment.\n\n\n\n\nAfter (Improved Readability)\npublic int CompareStringLengths(string first, string second)\n{\n    // If both strings are of equal length, return 0\n    if (first.Length == second.Length)\n    {\n        return 0;\n    }\n    \n    // If the first string is longer, return 1; otherwise, return -1\n    return (first.Length &gt; second.Length) ? 1 : -1;\n}\n\nWhat changed?\n\nClearer Method Name: CompareStringLengths leaves no doubt about its function.\n\nVariable Names: first, second are more descriptive.\n\nInline Explanation: Comments are direct and minimal, supporting the code’s clarity.\n\n\n\n\n\nGuidelines for Improving Readability\n\nMeaningful Names: Use descriptive variable/method/class names that reveal intent.\n\nConsistent Formatting: Follow a consistent style guide (indentation, spacing, etc.).\n\nShort, Focused Methods: Each method should perform a single, clear task.\n\nUse Comments Sparingly: Explain why the code does something if it’s not obvious—avoid restating what is already clear in the code.\n\nAvoid Deep Nesting: Too many nested loops/conditions reduce clarity. Refactor or extract methods when logic grows complex.\n\n\n\n\n\nMaintainability\n\nDefinition\nMaintainability refers to how easily software can be modified, improved, or fixed over time. Maintainable code is adaptable to new requirements, straightforward to test, and resilient against unintended side effects when changed.\n\n“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” – Martin Fowler\n\n\n\nWhy It Matters\n\nLongevity: Most projects evolve long after initial release. Code that’s easy to maintain avoids becoming a “legacy mess.”\n\nCost-Effectiveness: Maintenance often represents the largest cost in a software’s lifecycle. Reducing friction in updates saves time and money.\n\nReliability: When code is well-structured, applying bug fixes or enhancements is less risky—fewer ripple effects across the system.\n\n\n\nExample in C\n\nBefore (Hard to Maintain)\npublic class UserManager\n{\n    // This class does many things: manages users, sends emails, logs activities, etc.\n    \n    public void CreateUser(string username, string email)\n    {\n        // 1. Insert user into database\n        // ...\n        \n        // 2. Send welcome email\n        // ...\n        \n        // 3. Log user creation activity\n        // ...\n    }\n\n    public void DisableUser(int userId)\n    {\n        // 1. Mark user as disabled in database\n        // ...\n        \n        // 2. Send account closure email\n        // ...\n        \n        // 3. Log disabling activity\n        // ...\n    }\n}\n\nWhat’s wrong?\n\nMultiple Responsibilities: This class is updating the database, sending emails, and logging. A single change in emailing or logging can force multiple modifications here, risking errors.\n\nHarder to test each aspect in isolation (database, email, logging logic are all tangled).\n\n\n\n\nAfter (Improved Maintainability)\npublic interface IUserRepository\n{\n    void AddUser(User user);\n    void DisableUser(int userId);\n    // Other user-related data operations\n}\n\npublic interface IEmailService\n{\n    void SendEmail(string to, string subject, string body);\n}\n\npublic interface ILogger\n{\n    void Log(string message);\n}\n\npublic class UserManager\n{\n    private readonly IUserRepository _userRepository;\n    private readonly IEmailService _emailService;\n    private readonly ILogger _logger;\n\n    public UserManager(\n        IUserRepository userRepository,\n        IEmailService emailService,\n        ILogger logger)\n    {\n        _userRepository = userRepository;\n        _emailService = emailService;\n        _logger = logger;\n    }\n\n    public void CreateUser(string username, string email)\n    {\n        _userRepository.AddUser(new User { UserName = username, Email = email });\n        _emailService.SendEmail(email, \"Welcome!\", \"Welcome to our platform!\");\n        _logger.Log($\"User created: {username}\");\n    }\n\n    public void DisableUser(int userId)\n    {\n        _userRepository.DisableUser(userId);\n        _emailService.SendEmail(\"admin@example.com\", \"User Disabled\", $\"User {userId} was disabled.\");\n        _logger.Log($\"User disabled: {userId}\");\n    }\n}\n\nWhat changed?\n\nSingle Responsibility: UserManager focuses on orchestrating operations, delegating work to IUserRepository, IEmailService, and ILogger.\n\nDependency Injection: Makes it easy to swap out implementations (e.g., a MockEmailService for tests).\n\nTesting & Flexibility: Each concern (data access, email, logging) can be tested or replaced independently.\n\n\n\n\n\nGuidelines for Improving Maintainability\n\nModular Design: Separate concerns into distinct classes or modules (SRP from SOLID).\n\nUse Abstractions: Depend on interfaces, not concrete implementations (DIP from SOLID).\n\nAutomated Testing: Write unit tests and integration tests to catch regressions quickly.\n\nRefactor Regularly: Continuously simplify and improve the code structure as requirements evolve.\n\nDocumentation: Maintain up-to-date documentation for architecture, major components, and usage patterns (helps future developers).\n\n\n\n\n\nBringing It All Together\nReadability and Maintainability go hand in hand:\n\nReadable code is simpler to modify because everyone understands it better.\n\nMaintainable code keeps changes organized, which in turn keeps readability high.\n\nWhen you focus on both, you create a codebase that’s:\n\nWelcoming to new contributors.\n\nResilient to new requirements.\n\nEasier to test, debug, and extend over the software’s lifetime.\n\n\n\nFinal Thoughts\n\nWriting readable code requires consistency, clarity, and straightforward logic.\n\nEnsuring maintainability demands good architecture, modular design, and ongoing refactoring.\n\nStriking a balance between these aspects fosters a robust, long-lived, and developer-friendly software system.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "All articles",
      "During a project",
      "Readability & Maintainability"
    ]
  },
  {
    "objectID": "articles/During-a-project/index.html",
    "href": "articles/During-a-project/index.html",
    "title": "During a project",
    "section": "",
    "text": "Congratulations on making it through the daunting start! Now you might already have the basics down, good for you!\nYou might now be thinking “I know the basics, tell me what i need to know in my day to day work”. Well worry not, here you will find all the articles you might find useful during your work with us.\nTake a look around, who knows what you might find!\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n\n\n\n\n\n\n\n\nGuide to Taiga.io\n\n\n\nGeneral\n\nDuring a project\n\n\n\n\n\n\n\nNiko Laurila\n\n\nOct 17, 2024\n\n\n\n\n\n\n\n\n\n\n\nModular & Reusable code\n\n\n\nDuring a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nReadability & Maintainability\n\n\n\nDuring a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nYAGNI\n\n\n\nDuring a project\n\nGeneral\n\n\n\n\n\n\n\nNiko Laurila, Miika Reijonen\n\n\nFeb 24, 2025\n\n\n\n\n\n\n\n\n\n\n\nManaging a workflow\n\n\n\nDuring a project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n Back to top",
    "crumbs": [
      "All articles",
      "During a project"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/DRY.html",
    "href": "articles/Beginning-a-project/DRY.html",
    "title": "DRY",
    "section": "",
    "text": "DRY stands for Don’t Repeat Yourself. It’s a core software development principle stating that every piece of knowledge or logic must have a single, unambiguous representation within a system.\n\n“Duplication is the primary enemy of a well-designed system.” – Robert C. Martin\n\n\n\n\n\nMaintainability: When code is duplicated in many places, updating or fixing it requires you to remember all occurrences—risking inconsistencies and bugs.\n\nReadability: Centralizing logic in one location avoids clutter and makes your code easier to understand.\n\nExtensibility: Systems with minimal duplication are easier to extend because you only update logic in one place when requirements change.\n\nConsistency: Having a single source of truth means less chance for conflicting implementations or data.\n\n\n\n\n\nBelow is a hypothetical scenario demonstrating how to apply DRY to avoid code duplication.\n\n\npublic class Invoice\n{\n    public decimal Amount { get; set; }\n    public decimal Discount { get; set; }\n    public decimal CalculateTotal()\n    {\n        // Suppose the discount is a percentage of the Amount\n        // The discount should not exceed the Amount\n        if (Discount &gt; Amount)\n        {\n            Discount = Amount;\n        }\n        return Amount - Discount;\n    }\n}\n\npublic class Order\n{\n    public decimal Subtotal { get; set; }\n    public decimal Discount { get; set; }\n    public decimal CalculateTotal()\n    {\n        // Repeating the same discount logic\n        if (Discount &gt; Subtotal)\n        {\n            Discount = Subtotal;\n        }\n        return Subtotal - Discount;\n    }\n}\n\n\n\nInvoice and Order both have a similar concept of “subtract a discount, ensuring it doesn’t exceed the total amount.”\n\nThe logic (if (Discount &gt; Amount) Discount = Amount;) is duplicated in both classes.\n\nIf we need to change how we calculate discount limits in the future, we’d have to remember to update it in multiple places—risking inconsistencies.\n\n\n\n\n\n\npublic static class DiscountCalculator\n{\n    public static decimal CalculateTotalWithDiscount(decimal total, decimal discount)\n    {\n        if (discount &gt; total)\n        {\n            discount = total;\n        }\n        return total - discount;\n    }\n}\n\npublic class Invoice\n{\n    public decimal Amount { get; set; }\n    public decimal Discount { get; set; }\n\n    public decimal CalculateTotal()\n    {\n        return DiscountCalculator.CalculateTotalWithDiscount(Amount, Discount);\n    }\n}\n\npublic class Order\n{\n    public decimal Subtotal { get; set; }\n    public decimal Discount { get; set; }\n\n    public decimal CalculateTotal()\n    {\n        return DiscountCalculator.CalculateTotalWithDiscount(Subtotal, Discount);\n    }\n}\n\n\n\nShared Method: We created a single DiscountCalculator utility class with a common method CalculateTotalWithDiscount().\n\nNo Duplication: Both Invoice and Order classes now use the same discount calculation logic, preventing discrepancies.\n\nSingle Source of Truth: If the discount logic changes, we only have to modify it in one place (DiscountCalculator).\n\n\n\n\n\n\n\n\nIdentify Common Patterns: Look for duplicated code or logic across classes and modules.\n\nExtract Shared Logic: Move repeated code into a single function, utility class, or extension method.\n\nUse Appropriate Abstraction:\n\nIf the logic is domain-specific, place it in a relevant service class or domain model.\n\nIf the logic is more general, place it in a utility or helper class.\n\n\nRefactor When Changes Arise: When you make changes in one place, verify if the same change is needed in other areas.\n\nAvoid Over-Abstraction: Don’t blindly combine code that only looks similar but serves different purposes—balance DRY with clarity (sometimes code is coincidentally similar but not truly the same logic).\n\n\n\n\n\nDRY emphasizes the importance of reducing duplication in your codebase. By moving repeated logic to a single location, you improve maintainability, consistency, and clarity. A codebase that diligently applies DRY becomes easier to update, test, and scale, ultimately leading to more robust and reliable software.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "DRY"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/DRY.html#example-in-c",
    "href": "articles/Beginning-a-project/DRY.html#example-in-c",
    "title": "DRY",
    "section": "",
    "text": "Below is a hypothetical scenario demonstrating how to apply DRY to avoid code duplication.\n\n\npublic class Invoice\n{\n    public decimal Amount { get; set; }\n    public decimal Discount { get; set; }\n    public decimal CalculateTotal()\n    {\n        // Suppose the discount is a percentage of the Amount\n        // The discount should not exceed the Amount\n        if (Discount &gt; Amount)\n        {\n            Discount = Amount;\n        }\n        return Amount - Discount;\n    }\n}\n\npublic class Order\n{\n    public decimal Subtotal { get; set; }\n    public decimal Discount { get; set; }\n    public decimal CalculateTotal()\n    {\n        // Repeating the same discount logic\n        if (Discount &gt; Subtotal)\n        {\n            Discount = Subtotal;\n        }\n        return Subtotal - Discount;\n    }\n}\n\n\n\nInvoice and Order both have a similar concept of “subtract a discount, ensuring it doesn’t exceed the total amount.”\n\nThe logic (if (Discount &gt; Amount) Discount = Amount;) is duplicated in both classes.\n\nIf we need to change how we calculate discount limits in the future, we’d have to remember to update it in multiple places—risking inconsistencies.\n\n\n\n\n\n\npublic static class DiscountCalculator\n{\n    public static decimal CalculateTotalWithDiscount(decimal total, decimal discount)\n    {\n        if (discount &gt; total)\n        {\n            discount = total;\n        }\n        return total - discount;\n    }\n}\n\npublic class Invoice\n{\n    public decimal Amount { get; set; }\n    public decimal Discount { get; set; }\n\n    public decimal CalculateTotal()\n    {\n        return DiscountCalculator.CalculateTotalWithDiscount(Amount, Discount);\n    }\n}\n\npublic class Order\n{\n    public decimal Subtotal { get; set; }\n    public decimal Discount { get; set; }\n\n    public decimal CalculateTotal()\n    {\n        return DiscountCalculator.CalculateTotalWithDiscount(Subtotal, Discount);\n    }\n}\n\n\n\nShared Method: We created a single DiscountCalculator utility class with a common method CalculateTotalWithDiscount().\n\nNo Duplication: Both Invoice and Order classes now use the same discount calculation logic, preventing discrepancies.\n\nSingle Source of Truth: If the discount logic changes, we only have to modify it in one place (DiscountCalculator).",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "DRY"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/DRY.html#guidelines-for-applying-dry",
    "href": "articles/Beginning-a-project/DRY.html#guidelines-for-applying-dry",
    "title": "DRY",
    "section": "",
    "text": "Identify Common Patterns: Look for duplicated code or logic across classes and modules.\n\nExtract Shared Logic: Move repeated code into a single function, utility class, or extension method.\n\nUse Appropriate Abstraction:\n\nIf the logic is domain-specific, place it in a relevant service class or domain model.\n\nIf the logic is more general, place it in a utility or helper class.\n\n\nRefactor When Changes Arise: When you make changes in one place, verify if the same change is needed in other areas.\n\nAvoid Over-Abstraction: Don’t blindly combine code that only looks similar but serves different purposes—balance DRY with clarity (sometimes code is coincidentally similar but not truly the same logic).",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "DRY"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/DRY.html#conclusion",
    "href": "articles/Beginning-a-project/DRY.html#conclusion",
    "title": "DRY",
    "section": "",
    "text": "DRY emphasizes the importance of reducing duplication in your codebase. By moving repeated logic to a single location, you improve maintainability, consistency, and clarity. A codebase that diligently applies DRY becomes easier to update, test, and scale, ultimately leading to more robust and reliable software.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "DRY"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/KISS.html",
    "href": "articles/Beginning-a-project/KISS.html",
    "title": "KISS",
    "section": "",
    "text": "KISS stands for Keep It Simple, Stupid (sometimes stated as “Keep It Simple and Straightforward”). It emphasizes that most systems—and individual components—work best when they are kept as simple as possible. Unnecessary complexity should be avoided.\n\n“Simplicity is the soul of efficiency.” – Austin Freeman\n\n\n\n\n\nReadability: Simple code is easier to read and understand, which shortens the learning curve for new team members.\n\nMaintainability: Less complex code reduces the chance of introducing bugs and makes troubleshooting simpler.\n\nEfficiency: Overly engineered solutions can increase execution time, memory usage, and the likelihood of errors.\n\nExtensibility: With fewer moving parts, it’s easier to adapt or extend a solution without rewriting large chunks of code.\n\n\n\n\n\nBelow is a hypothetical scenario demonstrating how to apply KISS to avoid over-engineering.\n\n\n// A hypothetical scenario: We want to generate a welcome message for a user.\n\npublic interface IMessageTemplate\n{\n    string GetGreetingMessage(string userName);\n}\n\npublic class FormalGreeting : IMessageTemplate\n{\n    public string GetGreetingMessage(string userName)\n    {\n        return $\"Good day, {userName}. We welcome your esteemed presence.\";\n    }\n}\n\npublic class CasualGreeting : IMessageTemplate\n{\n    public string GetGreetingMessage(string userName)\n    {\n        return $\"Hey {userName}! Great to have you here!\";\n    }\n}\n\npublic enum GreetingType\n{\n    Formal,\n    Casual\n}\n\npublic class GreetingService\n{\n    private readonly IMessageTemplate _messageTemplate;\n\n    public GreetingService(GreetingType greetingType)\n    {\n        switch (greetingType)\n        {\n            case GreetingType.Formal:\n                _messageTemplate = new FormalGreeting();\n                break;\n            case GreetingType.Casual:\n                _messageTemplate = new CasualGreeting();\n                break;\n        }\n    }\n\n    public string GenerateGreeting(string userName)\n    {\n        return _messageTemplate.GetGreetingMessage(userName);\n    }\n}\n\n// Usage\nclass Program\n{\n    static void Main()\n    {\n        GreetingService service = new GreetingService(GreetingType.Casual);\n        string message = service.GenerateGreeting(\"Alice\");\n        Console.WriteLine(message);\n    }\n}\n\n\n\nMultiple Interfaces & Classes: For a relatively simple task (display a greeting), we have an interface IMessageTemplate, two implementations (FormalGreeting and CasualGreeting), an enum, and a GreetingService with a switch statement.\n\nOverkill for Basic Requirements: While an interface-based approach might be justified if we truly expect dozens of different greeting styles or need to inject them at runtime, the above code is arguably too elaborate for a simple greeting.\n\n\n\n\n\n\npublic class GreetingService\n{\n    public string GenerateGreeting(string userName, bool isFormal = false)\n    {\n        if (isFormal)\n        {\n            return $\"Good day, {userName}. We welcome your esteemed presence.\";\n        }\n        else\n        {\n            return $\"Hey {userName}! Great to have you here!\";\n        }\n    }\n}\n\n// Usage\nclass Program\n{\n    static void Main()\n    {\n        GreetingService service = new GreetingService();\n        string message = service.GenerateGreeting(\"Alice\", isFormal: false);\n        Console.WriteLine(message);\n    }\n}\n\n\n\nOne Class: All greeting logic is contained in a single, straightforward class.\n\nNo Unnecessary Interfaces: Unless there’s a clear, immediate need for polymorphism or multiple message providers, we can avoid the extra abstraction.\n\nEasy to Extend: If we need another greeting type, we can add one more condition or refactor slightly.\n\n\nBy applying KISS, we start with the simplest possible approach. If future requirements truly demand a more complex, extensible solution, we can refactor at that point.\n\n\n\n\n\n\n\n\nFocus on the Core Requirement: Implement what’s needed now, not what might be needed in the future (“YAGNI”—You Aren’t Gonna Need It).\n\nAvoid Over-Abstraction: Don’t build complex class hierarchies, interfaces, or design patterns without a compelling reason.\n\nRefactor When Needed: Start simple; if complexity grows, refactor to a more suitable design.\n\nKeep Methods Short: Break larger methods into smaller, focused ones for clarity.\n\nUse Clear Names & Conventions: Self-explanatory names often make code simpler to read than complex logic does.\n\n\n\n\n\nKISS reminds us that software should be as simple as possible, but no simpler. Complexity often invites bugs, development delays, and frustration. By keeping your solutions lean and straightforward, you enhance readability, maintainability, and extendability—ultimately delivering more reliable and robust software.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "KISS"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/KISS.html#example-in-c",
    "href": "articles/Beginning-a-project/KISS.html#example-in-c",
    "title": "KISS",
    "section": "",
    "text": "Below is a hypothetical scenario demonstrating how to apply KISS to avoid over-engineering.\n\n\n// A hypothetical scenario: We want to generate a welcome message for a user.\n\npublic interface IMessageTemplate\n{\n    string GetGreetingMessage(string userName);\n}\n\npublic class FormalGreeting : IMessageTemplate\n{\n    public string GetGreetingMessage(string userName)\n    {\n        return $\"Good day, {userName}. We welcome your esteemed presence.\";\n    }\n}\n\npublic class CasualGreeting : IMessageTemplate\n{\n    public string GetGreetingMessage(string userName)\n    {\n        return $\"Hey {userName}! Great to have you here!\";\n    }\n}\n\npublic enum GreetingType\n{\n    Formal,\n    Casual\n}\n\npublic class GreetingService\n{\n    private readonly IMessageTemplate _messageTemplate;\n\n    public GreetingService(GreetingType greetingType)\n    {\n        switch (greetingType)\n        {\n            case GreetingType.Formal:\n                _messageTemplate = new FormalGreeting();\n                break;\n            case GreetingType.Casual:\n                _messageTemplate = new CasualGreeting();\n                break;\n        }\n    }\n\n    public string GenerateGreeting(string userName)\n    {\n        return _messageTemplate.GetGreetingMessage(userName);\n    }\n}\n\n// Usage\nclass Program\n{\n    static void Main()\n    {\n        GreetingService service = new GreetingService(GreetingType.Casual);\n        string message = service.GenerateGreeting(\"Alice\");\n        Console.WriteLine(message);\n    }\n}\n\n\n\nMultiple Interfaces & Classes: For a relatively simple task (display a greeting), we have an interface IMessageTemplate, two implementations (FormalGreeting and CasualGreeting), an enum, and a GreetingService with a switch statement.\n\nOverkill for Basic Requirements: While an interface-based approach might be justified if we truly expect dozens of different greeting styles or need to inject them at runtime, the above code is arguably too elaborate for a simple greeting.\n\n\n\n\n\n\npublic class GreetingService\n{\n    public string GenerateGreeting(string userName, bool isFormal = false)\n    {\n        if (isFormal)\n        {\n            return $\"Good day, {userName}. We welcome your esteemed presence.\";\n        }\n        else\n        {\n            return $\"Hey {userName}! Great to have you here!\";\n        }\n    }\n}\n\n// Usage\nclass Program\n{\n    static void Main()\n    {\n        GreetingService service = new GreetingService();\n        string message = service.GenerateGreeting(\"Alice\", isFormal: false);\n        Console.WriteLine(message);\n    }\n}\n\n\n\nOne Class: All greeting logic is contained in a single, straightforward class.\n\nNo Unnecessary Interfaces: Unless there’s a clear, immediate need for polymorphism or multiple message providers, we can avoid the extra abstraction.\n\nEasy to Extend: If we need another greeting type, we can add one more condition or refactor slightly.\n\n\nBy applying KISS, we start with the simplest possible approach. If future requirements truly demand a more complex, extensible solution, we can refactor at that point.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "KISS"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/KISS.html#guidelines-for-applying-kiss",
    "href": "articles/Beginning-a-project/KISS.html#guidelines-for-applying-kiss",
    "title": "KISS",
    "section": "",
    "text": "Focus on the Core Requirement: Implement what’s needed now, not what might be needed in the future (“YAGNI”—You Aren’t Gonna Need It).\n\nAvoid Over-Abstraction: Don’t build complex class hierarchies, interfaces, or design patterns without a compelling reason.\n\nRefactor When Needed: Start simple; if complexity grows, refactor to a more suitable design.\n\nKeep Methods Short: Break larger methods into smaller, focused ones for clarity.\n\nUse Clear Names & Conventions: Self-explanatory names often make code simpler to read than complex logic does.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "KISS"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/KISS.html#conclusion",
    "href": "articles/Beginning-a-project/KISS.html#conclusion",
    "title": "KISS",
    "section": "",
    "text": "KISS reminds us that software should be as simple as possible, but no simpler. Complexity often invites bugs, development delays, and frustration. By keeping your solutions lean and straightforward, you enhance readability, maintainability, and extendability—ultimately delivering more reliable and robust software.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "KISS"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-project-file-and-folder-structure.html",
    "href": "articles/Beginning-a-project/React-project-file-and-folder-structure.html",
    "title": "React files and folder structure",
    "section": "",
    "text": "React Project File and Folder structure\nA well-organized file and folder structure is crucial for the maintainability, scalability, and readability of a React frontend project. While React itself doesn’t enforce a specific structure, adopting a logical and consistent approach is highly recommended. Here’s a breakdown of common practices and guidelines:\nCore Principles:\n\nClarity and Readability: The structure should be intuitive and easy for any developer to understand, even if they are new to the project.\nScalability: The structure should accommodate the growth of the application without becoming a tangled mess.\nMaintainability: It should be easy to find and modify code, introduce new features, and refactor existing ones.\nSeparation of Concerns: Grouping related files together based on their purpose or feature helps keep the codebase organized.\nConsistency: Once a structure is chosen, stick to it throughout the project.\n\nCommon Folder Structures:\nTwo prevalent approaches for organizing React projects are:\n\nGrouping by File Type: (should start by this)\n\nOrganizes files based on their technical role (e.g., all components in a components folder, all pages in a pages folder).\nSimple and easy to grasp for smaller to medium-sized applications.\nCan become harder to manage in large applications as feature logic is spread across different folders.\n\nsrc/\n├── assets/ # images, fonts, icons\n├── components/ # reusable UI components\n├── pages/ # route-level components\n├── utils/ # helper functions\n├── hooks/ # custom React composables\n├── tests/ # shared test utilities\n├── App.ts\n├── index.ts\n└── ...\nGrouping by Feature (Domain-Based):\n\nOrganizes files based on the features or domains of the application (e.g., all files related to user authentication in an auth folder, all files related to products in a products folder).\nMore suitable for larger and complex applications.\nKeeps feature-related logic and components together, improving maintainability and understanding of specific parts of the application.\n\nsrc/\n├── features/\n│   ├── auth/\n│   │   ├── components/\n│   │   ├── pages/\n│   │   ├── hooks/\n│   │   ├── utils/\n│   │   └── ...\n│   └── products/\n│       ├── components/\n│       ├── pages/\n│       ├── hooks/\n│       ├── utils/\n│       └── ...\n├── components/ (for shared/global components)\n├── assets/\n├── utils/ (for shared utilities)\n├── App.ts\n└── index.ts\n\nMany projects adopt a hybrid approach, combining aspects of both, which often proves effective for balancing simplicity and scalability.\nKey Folders and their Organization:\nWithin the chosen structure, here’s a breakdown of common folders and how to organize files within them:\n\nsrc/: This is the main directory for your application’s source code. Most of your development will happen here.\ncomponents/:\n\nHouses reusable UI components that can be used across different parts of your application.\nCan be further organized into subfolders for better grouping (e.g., components/buttons, components/forms, components/ui).\nFor feature-based structures, this folder is typically for truly global or shared components. Feature-specific components reside within the feature’s folder.\nConsider grouping component-related files (component file, CSS/styled-components, tests) within a single folder named after the component (e.g., components/Button/Button.ts, components/Button/Button.module.css, components/Button/Button.test.ts).\n\npages/ (or routes/):\n\nContains top-level components that represent different pages or routes in your application.\nThese components typically compose smaller components from the components folder to form a complete page layout.\nIn frameworks like Next.ts, this folder has a specific meaning for file-system based routing. In create-react-app or similar setups using React Router, these are simply components rendered at specific routes.\n\nassets/:\n\nStores static assets like images, fonts, and other media files.\nCan be further categorized into subfolders like assets/images, assets/fonts, etc.\n\nutils/:\n\nContains utility functions or helper modules that perform common tasks and are used across the application.\nExamples include date formatting, API helpers, validation functions, etc.\n\nhooks/:\n\nDedicated folder for custom React hooks.\nOrganizing custom hooks here makes them easily discoverable and reusable.\n\ncontext/:\n\nIf you are using React’s Context API for state management, store your context providers and consumers here.\n\nredux/ or store/:\n\nIf using Redux or another state management library, this folder will contain your store configuration, reducers, actions, and selectors.\nCan be organized by feature or module within this folder.\n\nstyles/:\n\nContains global styles, CSS variables, theme files, or shared styling configurations.\nIf using CSS modules or styled-components, component-specific styles often live with the component files.\n\napi/ or services/:\n\nHouses modules responsible for interacting with backend APIs or external services.\nSeparating API logic makes it easier to manage data fetching and mutations.\n\nconstants/:\n\nStores application-wide constants.\n\ntypes/ (for TypeScript projects):\n\nContains TypeScript type definitions and interfaces.\n\n\nOrganizing Pages and Routes:\n\nRoute Configuration: If you are using a routing library like React Router, the main route configuration can reside in your App.ts or in a dedicated routes.ts file within the src folder or a routes/ subfolder.\nPage Components: As mentioned, place components that represent full pages in the pages/ folder (or within feature folders in a feature-based structure).\nNested Routes: For nested routes, the corresponding components can be organized hierarchically within the pages/ or feature folders to mirror the route structure.\n\nGuidelines for File Naming:\n\nComponents: Use PascalCase (e.g., Button.ts, UserProfilePage.ts).\nOther Files: Use camelCase or kebab-case depending on your team’s preference (e.g., utils.ts, api-client.ts).\nIndex Files: Using index.ts within a folder allows for cleaner imports (e.g., import Button from './components/Button') instead of import Button from './components/Button/Button'). However, this can make it harder to find specific files when searching in an editor. Choose one approach and stick to it.\nTest Files: Colocate test files with the code they are testing, using a consistent naming convention (e.g., Button.test.ts, useAuth.test.ts).\n\nAvoiding Common Pitfalls:\n\nToo Much Nesting: Deeply nested folders can make navigation and imports cumbersome. Aim for a relatively flat structure where possible.\nInconsistent Naming: Lack of consistent naming conventions for files and folders can lead to confusion.\nMixing Concerns: Avoid putting unrelated logic or components in the same folder.\nOver-engineering: Don’t create overly complex structures for small projects. Start simple and refactor as the project grows.\n\nChoosing the Right Structure:\nThe “best” structure depends on the size and complexity of your project, as well as the preferences of your development team.\n\nFor small projects or those just starting, a file-type based structure is often sufficient and easy to get started with.\nFor medium to large projects with distinct features, a feature-based or hybrid approach generally provides better organization and scalability.\n\nDiscuss and agree on a structure with your team early in the project and document it. This ensures everyone is on the same page and helps maintain consistency as the project evolves.\n\n\n\n\n Back to top",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "React files and folder structure"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html",
    "href": "articles/Beginning-a-project/React-frontend-template.html",
    "title": "Simple react frontend",
    "section": "",
    "text": "Before you start, you need Node.js and pnpm (Performant npm) installed on your computer.\n\nWhat are they?\n\nNode.js: A runtime environment that lets you run JavaScript code outside of a web browser. It’s needed for build tools like Vite and package managers like pnpm.\npnpm: A fast, disk space-efficient package manager. (Refer to the “npm vs. pnpm” section below for more details).\n\nHow to check if you have Node.js: Open your terminal or command prompt and type: bash     node -v If you see a version number, you should be good. If not, download and install Node.js from nodejs.org (LTS version is recommended).\n\nTry to ensure that your Node.js uses the lates version to mitigate possible issues during development\n\nHow to install and check pnpm: If you have Node.js (which usually includes npm), you can install pnpm using npm: bash     npm install -g pnpm Then check its version: bash     pnpm -v Alternatively, visit pnpm.io/installation for other installation methods.\n\n\n\n\n\nVite is a modern build tool that provides a significantly faster and leaner development experience compared to older tools like Create React App (which is now deprecated).\n\nOpen your terminal or command prompt. Navigate to the directory where you want to create your new project folder.\nRun the Vite creation command:\npnpm create vite my-react-app --template react-ts\n\n\nExplanation:\n\npnpm create vite: This is pnpm’s command to scaffold (set up) a new project using Vite.\nmy-react-app: This is the name you’re giving to your project folder. You can change this to any name you like (e.g., weather-app, name-of-your-react-project).\n--template react-ts: This flag tells Vite to use its pre-configured template for a React project with TypeScript. Vite has many other templates for different frameworks and plain JavaScript/TypeScript.\n\nWhat happens during this step?\n\nVite quickly creates a new directory named my-react-app.\nIt sets up a minimal project structure with the essential files for a React + TypeScript application. Unlike older tools, it doesn’t install dependencies at this stage, making this step very fast.\nKey files created include:\n\nindex.html: Located in the project root, this is the main entry point of your application for the browser.\nsrc/main.tsx: The JavaScript/TypeScript entry point where your React application is initialized and mounted to the DOM.\nvite.config.ts: The configuration file for Vite, though for basic React + TS setup, you often don’t need to touch this initially.\npackage.json: Pre-filled with necessary dependencies (like React, ReactDOM, TypeScript) and scripts.\n\n\n\n\n\n\n\nOpen your terminal or command prompt.\nNavigate to the directory where you want to create your new project folder.\nRun the following command:\nBash\npnpm create vite@latest\n\nUsing @latest ensures you are using the most recent version of the Vite scaffolding tool.\n\n\nAfter running the command, Vite will ask you a few questions:\n\nProject name: ? Project name: ›\n\nType the name for your project folder (e.g., my-react-app) and press Enter.\n\nSelect a framework: ? Select a framework: › - Use arrow keys. Return to submit.\n\nUse the Up/Down arrow keys to highlight React.\nPress Enter.\n\n  Vanilla\n  Vue\n❯ React\n  Preact\n  Lit\n  Svelte\n  Solid\n  Qwik\n  Others\nSelect a variant: ? Select a variant: › - Use arrow keys. Return to submit.\n\nUse the Up/Down arrow keys to highlight TypeScript (or TypeScript + SWC if available - SWC is a faster Rust-based compiler that Vite can use). For most cases, either is fine; “TypeScript + SWC” might offer slightly faster compile times.\nPress Enter.\n\n  JavaScript\n  TypeScript  &lt;-- Choose this\n  JavaScript + SWC\n  TypeScript + SWC &lt;-- Or choose this\n\n\nWhat happens: Vite creates the project directory (my-react-ts-vite-app or whatever you named it) with the necessary files and configuration for a React + TypeScript project based on your selections.\n\n\n\n\n\n\nChange directory: bash     cd my-react-app (Replace my-react-app with the actual name you used.)\n\n\n\n\n\nNow that you are inside your project directory, you need to install the dependencies listed in the package.json file.\n\nInstall dependencies using pnpm: bash     pnpm install\n\n\nExplanation:\n\npnpm install: This command reads the package.json file and downloads/links all the necessary packages (React, ReactDOM, TypeScript, Vite itself as a development dependency, etc.) into a node_modules directory using pnpm’s efficient storage mechanism. It will also create a pnpm-lock.yaml file to ensure consistent installations.\n\n\n\n\n\n\nWith dependencies installed, you can run the local development server.\n\nRun the development script: bash     pnpm dev\n\n\nExplanation:\n\npnpm dev: This command runs the \"dev\" script defined in your package.json (which Vite sets up to vite).\n\nWhat happens during this step?\n\nVite starts its highly optimized development server. It’s known for its extremely fast startup time and Hot Module Replacement (HMR) that updates your application in the browser almost instantly when you save changes, without losing component state.\nIt will typically open your default web browser automatically, navigating to a local address like http://localhost:5173 (the port may vary if 5173 is in use (5173 is the default)).\nYou’ll see the default Vite + React starter page.\n\n\n\n\n\n\n\nOpen the project folder (my-react-app) in your favorite code editor (like Visual Studio Code, Cursor, etc.).\nKey files and folders to note in a Vite + React project:\n\nindex.html: (In the project root) The main HTML file. Vite injects your JavaScript into this.\npublic/: For static assets that are copied directly to the build output directory without processing (e.g., favicon.ico, robots.txt).\nsrc/: Contains your source code.\n\nmain.tsx: The entry point where React is initialized (ReactDOM.createRoot(...).render(...)).\nApp.tsx: The main application component. This is a good place to start modifying.\nvite-env.d.ts: TypeScript type definitions for Vite-specific environment variables.\nassets/: Often used for assets like images or fonts that are imported by your JavaScript/CSS.\n\npackage.json: Lists project dependencies and scripts (dev, build, lint, preview).\npnpm-lock.yaml: pnpm’s lockfile for deterministic dependency resolution.\ntsconfig.json & tsconfig.node.json: TypeScript configuration files.\nvite.config.ts: Vite’s configuration file. You can customize Vite’s behavior here (e.g., add plugins).\n\n\nNow you can start editing files like src/App.tsx. Save your changes, and the browser page should update instantly! 🎉\n\n\n\n\nVite has excellent built-in support for various styling methods. Here are some popular options:\n\n\n\n\nDescription: A popular utility-first CSS framework. You build designs directly in your JSX by applying pre-defined utility classes.\nHow to Use (Vite Setup):\n\nInstall Dependencies: bash       pnpm add -D tailwindcss postcss autoprefixer\nGenerate Config Files: bash       pnpm tailwindcss init -p (This creates tailwind.config.js and postcss.config.js)\nConfigure Template Paths: In tailwind.config.js, tell Tailwind where your component files are: js       /** @type {import('tailwindcss').Config} */       export default { // Note: Vite typically uses ES module syntax for config files         content: [           \"./index.html\", // Include the root HTML file           \"./src/**/*.{js,ts,jsx,tsx}\", // Include all relevant files in src         ],         theme: {           extend: {},         },         plugins: [],       }\nAdd Tailwind Directives: Create a main CSS file (e.g., src/index.css or src/style.css) and add the Tailwind directives: css       @tailwind base;       @tailwind components;       @tailwind utilities;\nImport the CSS file: Import this CSS file in your main entry point, src/main.tsx:\n// src/main.tsx\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css' // Or your chosen main CSS file name\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;,\n)\nApply Classes: Use Tailwind utility classes directly in your JSX.\n\nPros: Rapid UI development, consistent design system, highly customizable, avoids naming things, excellent for component-based frameworks, optimized production builds.\nCons: Can make JSX look “busy,” requires setup, learning curve for utility classes.\nCan be enhanced further by using UI Component Libraries, e.g. Material UI\n\n\n\n\n\n\nDescription: CSS (or SCSS/Sass) files where all class names and animation names are scoped locally to the component importing them. Vite supports this out-of-the-box with a specific file naming convention.\nHow to Use:\n\nCreate a file named with the .module.css or .module.scss extension (e.g., src/MyComponent.module.css or src/MyComponent.module.scss).\n\nIf using .module.scss, ensure sass is installed (pnpm add -D sass).\n\nWrite CSS/SCSS rules (e.g., .title { color: blue; }).\nImport the styles as an object into your component file: import styles from './MyComponent.module.css';.\nUse the class names via the imported object: className={styles.title}. Vite automatically generates unique class names behind the scenes.\n\nPros: Solves the global scope problem (no naming collisions); keeps styles modular and colocated; works with plain CSS or preprocessors.\nCons: Requires accessing class names via the styles object (styles.someClass); combining multiple conditional classes can be a bit more verbose.\n\n\n\n\n\n\nDescription:\n\nPlain CSS: Standard CSS in .css files.\nSass/SCSS: A CSS preprocessor that adds features like variables, nesting, mixins, and functions. SCSS is the more common syntax (CSS-like), while Sass uses indentation. Vite handles the compilation for you.\n\nHow to Use (Plain CSS):\n\nCreate a CSS file (e.g., src/App.css or src/styles/main.css).\nWrite standard CSS rules.\nImport it into a component or your main entry file (src/main.tsx): import './App.css'; or import './styles/main.css';.\nUse class names in your JSX: className=\"my-custom-class\".\n\nHow to Use (Sass/SCSS):\n\nInstall Sass: bash       pnpm add -D sass\nCreate an SCSS file (e.g., src/App.scss or src/styles/main.scss).\nWrite SCSS rules (e.g., $primary-color: blue; .my-element { color: $primary-color; }).\nImport it just like a CSS file: import './App.scss'; or import './styles/main.scss';. Vite will automatically compile it to CSS.\n\nPros: Simple and familiar (CSS); powerful features and better organization (Sass/SCSS); Vite handles compilation seamlessly.\nCons (Plain CSS & often basic Sass/SCSS): Styles are global by default, which can lead to naming conflicts in larger applications if not managed carefully (e.g., with BEM methodology).\n\n\n\n\n\n\nCSS-in-JS (e.g., styled-components, Emotion): Write actual CSS code within your JavaScript/TypeScript files. Allows for easy dynamic styling based on component props and provides scoped styles. Requires installing specific libraries (e.g., pnpm add styled-components and pnpm add -D @types/styled-components).\n\nPros: Scoped styles, dynamic styling, colocation of logic and styles.\nCons: Potential runtime overhead, can add bundle size, specific library syntax.\n\nUI Component Libraries (e.g., Material UI (MUI), Chakra UI, Ant Design): Pre-built sets of styled React components. You install the library (e.g., pnpm add @mui/material @emotion/react @emotion/styled) and use its components.\n\nPros: Very fast development for standard UIs, consistency, accessibility often handled.\nCons: Adds dependencies, might require learning the library’s API/theming, potential for generic look if not customized.\n\n\nRecommendation for Beginners with Vite:\n\nStart with Plain CSS or SCSS for familiarity, and combine with CSS Modules for scoping as your project grows. Vite makes this combination very easy.\nIf you value rapid prototyping and a utility-driven approach, Tailwind CSS is an excellent choice once you’re past the initial setup.\n\nChoose the method that best fits your project’s needs and your team’s preferences!\n\n\n\n\n\n(This section remains relevant as it explains the package manager choice)\nBoth npm and pnpm are package managers for Node.js projects, but they have different approaches:\n\nDisk Space Efficiency:\n\nnpm (v3+): Creates a “flat” node_modules. Duplicates packages across projects.\npnpm: Uses a content-addressable store and links packages. Saves significant disk space.\n\nInstallation Speed:\n\nnpm: Can be slower.\npnpm: Often significantly faster due to its linking strategy and efficient caching.\n\nnode_modules Structure & Phantom Dependencies:\n\nnpm: Hoists dependencies, potentially allowing access to undeclared “phantom dependencies.”\npnpm: Creates a strict, non-flat node_modules. Prevents phantom dependencies, making projects more robust.\n\nStrictness & Determinism:\n\npnpm: Generally stricter and more deterministic due to its unique node_modules structure and pnpm-lock.yaml.\n\nLock Files:\n\nnpm: package-lock.json.\npnpm: pnpm-lock.yaml.\n\n\nWhy choose pnpm? * Significant disk space savings. * Faster installations and updates. * More robust projects due to the prevention of phantom dependencies. * Strictness can lead to better dependency management.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#prerequisites",
    "href": "articles/Beginning-a-project/React-frontend-template.html#prerequisites",
    "title": "Simple react frontend",
    "section": "",
    "text": "Before you start, you need Node.js and pnpm (Performant npm) installed on your computer.\n\nWhat are they?\n\nNode.js: A runtime environment that lets you run JavaScript code outside of a web browser. It’s needed for build tools like Vite and package managers like pnpm.\npnpm: A fast, disk space-efficient package manager. (Refer to the “npm vs. pnpm” section below for more details).\n\nHow to check if you have Node.js: Open your terminal or command prompt and type: bash     node -v If you see a version number, you should be good. If not, download and install Node.js from nodejs.org (LTS version is recommended).\n\nTry to ensure that your Node.js uses the lates version to mitigate possible issues during development\n\nHow to install and check pnpm: If you have Node.js (which usually includes npm), you can install pnpm using npm: bash     npm install -g pnpm Then check its version: bash     pnpm -v Alternatively, visit pnpm.io/installation for other installation methods.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#step-1-create-the-react-typescript-project-with-vite",
    "href": "articles/Beginning-a-project/React-frontend-template.html#step-1-create-the-react-typescript-project-with-vite",
    "title": "Simple react frontend",
    "section": "",
    "text": "Vite is a modern build tool that provides a significantly faster and leaner development experience compared to older tools like Create React App (which is now deprecated).\n\nOpen your terminal or command prompt. Navigate to the directory where you want to create your new project folder.\nRun the Vite creation command:\npnpm create vite my-react-app --template react-ts\n\n\nExplanation:\n\npnpm create vite: This is pnpm’s command to scaffold (set up) a new project using Vite.\nmy-react-app: This is the name you’re giving to your project folder. You can change this to any name you like (e.g., weather-app, name-of-your-react-project).\n--template react-ts: This flag tells Vite to use its pre-configured template for a React project with TypeScript. Vite has many other templates for different frameworks and plain JavaScript/TypeScript.\n\nWhat happens during this step?\n\nVite quickly creates a new directory named my-react-app.\nIt sets up a minimal project structure with the essential files for a React + TypeScript application. Unlike older tools, it doesn’t install dependencies at this stage, making this step very fast.\nKey files created include:\n\nindex.html: Located in the project root, this is the main entry point of your application for the browser.\nsrc/main.tsx: The JavaScript/TypeScript entry point where your React application is initialized and mounted to the DOM.\nvite.config.ts: The configuration file for Vite, though for basic React + TS setup, you often don’t need to touch this initially.\npackage.json: Pre-filled with necessary dependencies (like React, ReactDOM, TypeScript) and scripts.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#manual-setup-using-pnpm-create-vitelatest-should-generate-the-same-template-project",
    "href": "articles/Beginning-a-project/React-frontend-template.html#manual-setup-using-pnpm-create-vitelatest-should-generate-the-same-template-project",
    "title": "Simple react frontend",
    "section": "",
    "text": "Open your terminal or command prompt.\nNavigate to the directory where you want to create your new project folder.\nRun the following command:\nBash\npnpm create vite@latest\n\nUsing @latest ensures you are using the most recent version of the Vite scaffolding tool.\n\n\nAfter running the command, Vite will ask you a few questions:\n\nProject name: ? Project name: ›\n\nType the name for your project folder (e.g., my-react-app) and press Enter.\n\nSelect a framework: ? Select a framework: › - Use arrow keys. Return to submit.\n\nUse the Up/Down arrow keys to highlight React.\nPress Enter.\n\n  Vanilla\n  Vue\n❯ React\n  Preact\n  Lit\n  Svelte\n  Solid\n  Qwik\n  Others\nSelect a variant: ? Select a variant: › - Use arrow keys. Return to submit.\n\nUse the Up/Down arrow keys to highlight TypeScript (or TypeScript + SWC if available - SWC is a faster Rust-based compiler that Vite can use). For most cases, either is fine; “TypeScript + SWC” might offer slightly faster compile times.\nPress Enter.\n\n  JavaScript\n  TypeScript  &lt;-- Choose this\n  JavaScript + SWC\n  TypeScript + SWC &lt;-- Or choose this\n\n\nWhat happens: Vite creates the project directory (my-react-ts-vite-app or whatever you named it) with the necessary files and configuration for a React + TypeScript project based on your selections.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#step-2-navigate-into-your-project-directory",
    "href": "articles/Beginning-a-project/React-frontend-template.html#step-2-navigate-into-your-project-directory",
    "title": "Simple react frontend",
    "section": "",
    "text": "Change directory: bash     cd my-react-app (Replace my-react-app with the actual name you used.)",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#step-3-install-dependencies",
    "href": "articles/Beginning-a-project/React-frontend-template.html#step-3-install-dependencies",
    "title": "Simple react frontend",
    "section": "",
    "text": "Now that you are inside your project directory, you need to install the dependencies listed in the package.json file.\n\nInstall dependencies using pnpm: bash     pnpm install\n\n\nExplanation:\n\npnpm install: This command reads the package.json file and downloads/links all the necessary packages (React, ReactDOM, TypeScript, Vite itself as a development dependency, etc.) into a node_modules directory using pnpm’s efficient storage mechanism. It will also create a pnpm-lock.yaml file to ensure consistent installations.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#step-4-start-the-development-server",
    "href": "articles/Beginning-a-project/React-frontend-template.html#step-4-start-the-development-server",
    "title": "Simple react frontend",
    "section": "",
    "text": "With dependencies installed, you can run the local development server.\n\nRun the development script: bash     pnpm dev\n\n\nExplanation:\n\npnpm dev: This command runs the \"dev\" script defined in your package.json (which Vite sets up to vite).\n\nWhat happens during this step?\n\nVite starts its highly optimized development server. It’s known for its extremely fast startup time and Hot Module Replacement (HMR) that updates your application in the browser almost instantly when you save changes, without losing component state.\nIt will typically open your default web browser automatically, navigating to a local address like http://localhost:5173 (the port may vary if 5173 is in use (5173 is the default)).\nYou’ll see the default Vite + React starter page.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#step-5-explore-and-edit-your-code",
    "href": "articles/Beginning-a-project/React-frontend-template.html#step-5-explore-and-edit-your-code",
    "title": "Simple react frontend",
    "section": "",
    "text": "Open the project folder (my-react-app) in your favorite code editor (like Visual Studio Code, Cursor, etc.).\nKey files and folders to note in a Vite + React project:\n\nindex.html: (In the project root) The main HTML file. Vite injects your JavaScript into this.\npublic/: For static assets that are copied directly to the build output directory without processing (e.g., favicon.ico, robots.txt).\nsrc/: Contains your source code.\n\nmain.tsx: The entry point where React is initialized (ReactDOM.createRoot(...).render(...)).\nApp.tsx: The main application component. This is a good place to start modifying.\nvite-env.d.ts: TypeScript type definitions for Vite-specific environment variables.\nassets/: Often used for assets like images or fonts that are imported by your JavaScript/CSS.\n\npackage.json: Lists project dependencies and scripts (dev, build, lint, preview).\npnpm-lock.yaml: pnpm’s lockfile for deterministic dependency resolution.\ntsconfig.json & tsconfig.node.json: TypeScript configuration files.\nvite.config.ts: Vite’s configuration file. You can customize Vite’s behavior here (e.g., add plugins).\n\n\nNow you can start editing files like src/App.tsx. Save your changes, and the browser page should update instantly! 🎉",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#step-6-choosing-a-styling-method",
    "href": "articles/Beginning-a-project/React-frontend-template.html#step-6-choosing-a-styling-method",
    "title": "Simple react frontend",
    "section": "",
    "text": "Vite has excellent built-in support for various styling methods. Here are some popular options:\n\n\n\n\nDescription: A popular utility-first CSS framework. You build designs directly in your JSX by applying pre-defined utility classes.\nHow to Use (Vite Setup):\n\nInstall Dependencies: bash       pnpm add -D tailwindcss postcss autoprefixer\nGenerate Config Files: bash       pnpm tailwindcss init -p (This creates tailwind.config.js and postcss.config.js)\nConfigure Template Paths: In tailwind.config.js, tell Tailwind where your component files are: js       /** @type {import('tailwindcss').Config} */       export default { // Note: Vite typically uses ES module syntax for config files         content: [           \"./index.html\", // Include the root HTML file           \"./src/**/*.{js,ts,jsx,tsx}\", // Include all relevant files in src         ],         theme: {           extend: {},         },         plugins: [],       }\nAdd Tailwind Directives: Create a main CSS file (e.g., src/index.css or src/style.css) and add the Tailwind directives: css       @tailwind base;       @tailwind components;       @tailwind utilities;\nImport the CSS file: Import this CSS file in your main entry point, src/main.tsx:\n// src/main.tsx\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css' // Or your chosen main CSS file name\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;,\n)\nApply Classes: Use Tailwind utility classes directly in your JSX.\n\nPros: Rapid UI development, consistent design system, highly customizable, avoids naming things, excellent for component-based frameworks, optimized production builds.\nCons: Can make JSX look “busy,” requires setup, learning curve for utility classes.\nCan be enhanced further by using UI Component Libraries, e.g. Material UI\n\n\n\n\n\n\nDescription: CSS (or SCSS/Sass) files where all class names and animation names are scoped locally to the component importing them. Vite supports this out-of-the-box with a specific file naming convention.\nHow to Use:\n\nCreate a file named with the .module.css or .module.scss extension (e.g., src/MyComponent.module.css or src/MyComponent.module.scss).\n\nIf using .module.scss, ensure sass is installed (pnpm add -D sass).\n\nWrite CSS/SCSS rules (e.g., .title { color: blue; }).\nImport the styles as an object into your component file: import styles from './MyComponent.module.css';.\nUse the class names via the imported object: className={styles.title}. Vite automatically generates unique class names behind the scenes.\n\nPros: Solves the global scope problem (no naming collisions); keeps styles modular and colocated; works with plain CSS or preprocessors.\nCons: Requires accessing class names via the styles object (styles.someClass); combining multiple conditional classes can be a bit more verbose.\n\n\n\n\n\n\nDescription:\n\nPlain CSS: Standard CSS in .css files.\nSass/SCSS: A CSS preprocessor that adds features like variables, nesting, mixins, and functions. SCSS is the more common syntax (CSS-like), while Sass uses indentation. Vite handles the compilation for you.\n\nHow to Use (Plain CSS):\n\nCreate a CSS file (e.g., src/App.css or src/styles/main.css).\nWrite standard CSS rules.\nImport it into a component or your main entry file (src/main.tsx): import './App.css'; or import './styles/main.css';.\nUse class names in your JSX: className=\"my-custom-class\".\n\nHow to Use (Sass/SCSS):\n\nInstall Sass: bash       pnpm add -D sass\nCreate an SCSS file (e.g., src/App.scss or src/styles/main.scss).\nWrite SCSS rules (e.g., $primary-color: blue; .my-element { color: $primary-color; }).\nImport it just like a CSS file: import './App.scss'; or import './styles/main.scss';. Vite will automatically compile it to CSS.\n\nPros: Simple and familiar (CSS); powerful features and better organization (Sass/SCSS); Vite handles compilation seamlessly.\nCons (Plain CSS & often basic Sass/SCSS): Styles are global by default, which can lead to naming conflicts in larger applications if not managed carefully (e.g., with BEM methodology).\n\n\n\n\n\n\nCSS-in-JS (e.g., styled-components, Emotion): Write actual CSS code within your JavaScript/TypeScript files. Allows for easy dynamic styling based on component props and provides scoped styles. Requires installing specific libraries (e.g., pnpm add styled-components and pnpm add -D @types/styled-components).\n\nPros: Scoped styles, dynamic styling, colocation of logic and styles.\nCons: Potential runtime overhead, can add bundle size, specific library syntax.\n\nUI Component Libraries (e.g., Material UI (MUI), Chakra UI, Ant Design): Pre-built sets of styled React components. You install the library (e.g., pnpm add @mui/material @emotion/react @emotion/styled) and use its components.\n\nPros: Very fast development for standard UIs, consistency, accessibility often handled.\nCons: Adds dependencies, might require learning the library’s API/theming, potential for generic look if not customized.\n\n\nRecommendation for Beginners with Vite:\n\nStart with Plain CSS or SCSS for familiarity, and combine with CSS Modules for scoping as your project grows. Vite makes this combination very easy.\nIf you value rapid prototyping and a utility-driven approach, Tailwind CSS is an excellent choice once you’re past the initial setup.\n\nChoose the method that best fits your project’s needs and your team’s preferences!",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/React-frontend-template.html#npm-vs.-pnpm-key-differences-explained",
    "href": "articles/Beginning-a-project/React-frontend-template.html#npm-vs.-pnpm-key-differences-explained",
    "title": "Simple react frontend",
    "section": "",
    "text": "(This section remains relevant as it explains the package manager choice)\nBoth npm and pnpm are package managers for Node.js projects, but they have different approaches:\n\nDisk Space Efficiency:\n\nnpm (v3+): Creates a “flat” node_modules. Duplicates packages across projects.\npnpm: Uses a content-addressable store and links packages. Saves significant disk space.\n\nInstallation Speed:\n\nnpm: Can be slower.\npnpm: Often significantly faster due to its linking strategy and efficient caching.\n\nnode_modules Structure & Phantom Dependencies:\n\nnpm: Hoists dependencies, potentially allowing access to undeclared “phantom dependencies.”\npnpm: Creates a strict, non-flat node_modules. Prevents phantom dependencies, making projects more robust.\n\nStrictness & Determinism:\n\npnpm: Generally stricter and more deterministic due to its unique node_modules structure and pnpm-lock.yaml.\n\nLock Files:\n\nnpm: package-lock.json.\npnpm: pnpm-lock.yaml.\n\n\nWhy choose pnpm? * Significant disk space savings. * Faster installations and updates. * More robust projects due to the prevention of phantom dependencies. * Strictness can lead to better dependency management.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Simple react frontend"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Clean-architecture.html",
    "href": "articles/Beginning-a-project/Clean-architecture.html",
    "title": "Clean architecture",
    "section": "",
    "text": "image\n\n\nClean Architecture is a layered architectural style that organizes software into concentric circles (or layers). Each layer has a well-defined role, and all dependencies point inwards—toward the most critical part of the system: the core business logic (or domain). The outer layers handle implementation details (e.g., frameworks, databases, user interfaces) that can change over time without affecting the domain logic.\nAt a high level, Clean Architecture looks like this (from innermost to outermost layer):\n\nEntities (Domain Model)\n\nEncapsulate enterprise-wide, core business rules and data.\n\nTypically, these are plain objects with minimal dependencies (no direct database or framework references).\n\nUse Cases (Application Layer / Interactors)\n\nContain application-specific business rules and orchestrate how data flows between entities and other parts of the system.\n\nCoordinate tasks (e.g., “Create Order,” “Process Payment”) using domain entities.\n\nNo knowledge of UI, database, or external services; only deals with abstractions.\n\nInterface Adapters (Adapters / Gateways / Presenters)\n\nTranslate data between Use Cases and Frameworks/Drivers.\n\nCould include repositories, DTOs (Data Transfer Objects), presenters, controllers, etc.\n\nResponsible for input/output formatting: parsing incoming requests, formatting outgoing responses.\n\nFrameworks and Drivers (Infrastructure Layer)\n\nOuter layer containing databases, web frameworks, UI frameworks, third-party services, etc.\n\nOperates through adapters (interfaces) defined in the more central layers.\n\nShould contain no business logic—if possible, only implementation details of the system’s boundaries.\n\n\n\n\n\n\nDependency Rule:\nAll source code dependencies point inward, toward higher-level policies (business rules). Inner layers know nothing about outer layers.\nSeparation of Concerns:\nEach layer focuses on a distinct set of responsibilities (domain logic, application orchestration, data access, presentation).\nTestability:\nSince business rules reside in framework-agnostic layers, they can be tested without spinning up databases or web servers.\nFlexibility & Maintainability:\nWhen changing a database, UI, or external API, the inner layers remain unaffected. This reduces coupling and makes large-scale refactors safer.\n\n\n\n\n\nBelow is a simplified example of how you might structure a Clean Architecture in C#. Real-world scenarios tend to be more complex but follow these core ideas.\n\n\nnamespace CleanArchitecture.Domain\n{\n    // Core domain object\n    public class Order\n    {\n        public int Id { get; private set; }\n        public decimal Total { get; private set; }\n        public bool IsPaid { get; private set; }\n\n        public Order(int id, decimal total)\n        {\n            Id = id;\n            Total = total;\n            IsPaid = false;\n        }\n\n        public void Pay()\n        {\n            // Business rule: you can only pay if the order is not already paid\n            if (IsPaid)\n            {\n                throw new InvalidOperationException(\"Order is already paid.\");\n            }\n            IsPaid = true;\n        }\n    }\n}\n\nPurpose: Contains the enterprise-wide business rules (Order).\nNo references to frameworks, databases, or UI.\n\n\n\n\nnamespace CleanArchitecture.Application\n{\n    public interface IOrderRepository\n    {\n        Order GetById(int orderId);\n        void Save(Order order);\n    }\n\n    public class PayOrderUseCase\n    {\n        private readonly IOrderRepository _orderRepository;\n\n        public PayOrderUseCase(IOrderRepository orderRepository)\n        {\n            _orderRepository = orderRepository;\n        }\n\n        public void Execute(int orderId)\n        {\n            // 1. Get the order from a repository\n            var order = _orderRepository.GetById(orderId);\n\n            // 2. Perform the domain action\n            order.Pay();\n\n            // 3. Persist the changes\n            _orderRepository.Save(order);\n        }\n    }\n}\n\nPurpose: Implements application-specific business rules (use cases).\n\nNo knowledge of how IOrderRepository is implemented (database, in-memory, etc.).\n\nCoordinates domain actions (order.Pay()).\n\n\n\n\nnamespace CleanArchitecture.Infrastructure.Persistence\n{\n    using CleanArchitecture.Application;\n    using CleanArchitecture.Domain;\n    using System.Collections.Generic;\n    using System.Linq;\n\n    // A simple in-memory repository for demonstration\n    public class InMemoryOrderRepository : IOrderRepository\n    {\n        private readonly List&lt;Order&gt; _orders = new List&lt;Order&gt;();\n\n        public Order GetById(int orderId)\n        {\n            return _orders.FirstOrDefault(o =&gt; o.Id == orderId);\n        }\n\n        public void Save(Order order)\n        {\n            // If order doesn't exist, add it; if it does, update it\n            var existingOrder = GetById(order.Id);\n            if (existingOrder == null)\n            {\n                _orders.Add(order);\n            }\n            else\n            {\n                // For simplicity, do nothing extra here\n            }\n        }\n    }\n}\n\nPurpose: Concrete implementation of IOrderRepository that interfaces with some form of storage (in this case, in-memory for demo).\n\nReal-world scenario: A repository that uses EF Core, Dapper, or any other data access technology—outer details that the core application logic need not know.\n\n\n\n\nnamespace CleanArchitecture.Web\n{\n    using CleanArchitecture.Application;\n    using CleanArchitecture.Domain;\n    using CleanArchitecture.Infrastructure.Persistence;\n    using Microsoft.AspNetCore.Mvc;\n\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class OrdersController : ControllerBase\n    {\n        private readonly PayOrderUseCase _payOrderUseCase;\n        private readonly IOrderRepository _orderRepository;  // For demonstration only\n\n        // Composition root: wiring up dependencies\n        public OrdersController()\n        {\n            _orderRepository = new InMemoryOrderRepository();\n            _payOrderUseCase = new PayOrderUseCase(_orderRepository);\n\n            // In a real-world app, a DI container (like .NET Core's built-in) \n            // would typically handle instantiations and injections.\n        }\n\n        [HttpPost(\"pay/{orderId}\")]\n        public ActionResult PayOrder(int orderId)\n        {\n            _payOrderUseCase.Execute(orderId);\n            return Ok(\"Order paid successfully.\");\n        }\n\n        // Additional endpoints could be added here\n    }\n}\n\nPurpose: The outermost layer, containing the web or UI framework code (ASP.NET in this example).\n\nResponsible for receiving HTTP requests, instantiating use cases (and repositories), and coordinating responses.\n\nNo domain or core logic here. It simply orchestrates calls to the Application Layer.\n\n\n\n\n\n\n\nFramework Independence: Business logic doesn’t rely on any particular framework. You can switch to a different UI, database, or library without rewriting core rules.\n\nTestability: With dependencies inverted (toward abstractions), you can plug in test doubles or mocks for repositories and services easily.\n\nMaintainability: By separating concerns, changes in UI or data storage affect only the outer layers, not the domain or use cases.\n\nDecoupled Code: The domain model and application rules remain unaffected by outside concerns (databases, APIs, UI frameworks).\n\n\n\n\n\n\nIt’s Not Just Folder Structure: Clean Architecture is more about dependency flow than merely having “nice folders.” You can have well-labeled directories but still violate dependency rules.\n\nIt’s Not Just for Large Apps: Even smaller projects benefit from layered boundaries if they anticipate future growth or complexity.\n\nIt Doesn’t Require a Particular Tech Stack: Clean Architecture is language/framework-agnostic. Whether in C#, Java, Python, or JavaScript, the principles remain the same.\n\n\n\n\n\nClean Architecture structures your application around the core business logic, shielding it from implementation details. By inverting dependencies, you minimize coupling and maximize the testability and flexibility of your system. This approach is particularly valuable in large, evolving projects where requirements, frameworks, and technologies may change over time, but the core business rules remain consistent and stable.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Clean architecture"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Clean-architecture.html#key-principles",
    "href": "articles/Beginning-a-project/Clean-architecture.html#key-principles",
    "title": "Clean architecture",
    "section": "",
    "text": "Dependency Rule:\nAll source code dependencies point inward, toward higher-level policies (business rules). Inner layers know nothing about outer layers.\nSeparation of Concerns:\nEach layer focuses on a distinct set of responsibilities (domain logic, application orchestration, data access, presentation).\nTestability:\nSince business rules reside in framework-agnostic layers, they can be tested without spinning up databases or web servers.\nFlexibility & Maintainability:\nWhen changing a database, UI, or external API, the inner layers remain unaffected. This reduces coupling and makes large-scale refactors safer.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Clean architecture"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Clean-architecture.html#conceptual-c-example",
    "href": "articles/Beginning-a-project/Clean-architecture.html#conceptual-c-example",
    "title": "Clean architecture",
    "section": "",
    "text": "Below is a simplified example of how you might structure a Clean Architecture in C#. Real-world scenarios tend to be more complex but follow these core ideas.\n\n\nnamespace CleanArchitecture.Domain\n{\n    // Core domain object\n    public class Order\n    {\n        public int Id { get; private set; }\n        public decimal Total { get; private set; }\n        public bool IsPaid { get; private set; }\n\n        public Order(int id, decimal total)\n        {\n            Id = id;\n            Total = total;\n            IsPaid = false;\n        }\n\n        public void Pay()\n        {\n            // Business rule: you can only pay if the order is not already paid\n            if (IsPaid)\n            {\n                throw new InvalidOperationException(\"Order is already paid.\");\n            }\n            IsPaid = true;\n        }\n    }\n}\n\nPurpose: Contains the enterprise-wide business rules (Order).\nNo references to frameworks, databases, or UI.\n\n\n\n\nnamespace CleanArchitecture.Application\n{\n    public interface IOrderRepository\n    {\n        Order GetById(int orderId);\n        void Save(Order order);\n    }\n\n    public class PayOrderUseCase\n    {\n        private readonly IOrderRepository _orderRepository;\n\n        public PayOrderUseCase(IOrderRepository orderRepository)\n        {\n            _orderRepository = orderRepository;\n        }\n\n        public void Execute(int orderId)\n        {\n            // 1. Get the order from a repository\n            var order = _orderRepository.GetById(orderId);\n\n            // 2. Perform the domain action\n            order.Pay();\n\n            // 3. Persist the changes\n            _orderRepository.Save(order);\n        }\n    }\n}\n\nPurpose: Implements application-specific business rules (use cases).\n\nNo knowledge of how IOrderRepository is implemented (database, in-memory, etc.).\n\nCoordinates domain actions (order.Pay()).\n\n\n\n\nnamespace CleanArchitecture.Infrastructure.Persistence\n{\n    using CleanArchitecture.Application;\n    using CleanArchitecture.Domain;\n    using System.Collections.Generic;\n    using System.Linq;\n\n    // A simple in-memory repository for demonstration\n    public class InMemoryOrderRepository : IOrderRepository\n    {\n        private readonly List&lt;Order&gt; _orders = new List&lt;Order&gt;();\n\n        public Order GetById(int orderId)\n        {\n            return _orders.FirstOrDefault(o =&gt; o.Id == orderId);\n        }\n\n        public void Save(Order order)\n        {\n            // If order doesn't exist, add it; if it does, update it\n            var existingOrder = GetById(order.Id);\n            if (existingOrder == null)\n            {\n                _orders.Add(order);\n            }\n            else\n            {\n                // For simplicity, do nothing extra here\n            }\n        }\n    }\n}\n\nPurpose: Concrete implementation of IOrderRepository that interfaces with some form of storage (in this case, in-memory for demo).\n\nReal-world scenario: A repository that uses EF Core, Dapper, or any other data access technology—outer details that the core application logic need not know.\n\n\n\n\nnamespace CleanArchitecture.Web\n{\n    using CleanArchitecture.Application;\n    using CleanArchitecture.Domain;\n    using CleanArchitecture.Infrastructure.Persistence;\n    using Microsoft.AspNetCore.Mvc;\n\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class OrdersController : ControllerBase\n    {\n        private readonly PayOrderUseCase _payOrderUseCase;\n        private readonly IOrderRepository _orderRepository;  // For demonstration only\n\n        // Composition root: wiring up dependencies\n        public OrdersController()\n        {\n            _orderRepository = new InMemoryOrderRepository();\n            _payOrderUseCase = new PayOrderUseCase(_orderRepository);\n\n            // In a real-world app, a DI container (like .NET Core's built-in) \n            // would typically handle instantiations and injections.\n        }\n\n        [HttpPost(\"pay/{orderId}\")]\n        public ActionResult PayOrder(int orderId)\n        {\n            _payOrderUseCase.Execute(orderId);\n            return Ok(\"Order paid successfully.\");\n        }\n\n        // Additional endpoints could be added here\n    }\n}\n\nPurpose: The outermost layer, containing the web or UI framework code (ASP.NET in this example).\n\nResponsible for receiving HTTP requests, instantiating use cases (and repositories), and coordinating responses.\n\nNo domain or core logic here. It simply orchestrates calls to the Application Layer.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Clean architecture"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Clean-architecture.html#benefits-of-clean-architecture",
    "href": "articles/Beginning-a-project/Clean-architecture.html#benefits-of-clean-architecture",
    "title": "Clean architecture",
    "section": "",
    "text": "Framework Independence: Business logic doesn’t rely on any particular framework. You can switch to a different UI, database, or library without rewriting core rules.\n\nTestability: With dependencies inverted (toward abstractions), you can plug in test doubles or mocks for repositories and services easily.\n\nMaintainability: By separating concerns, changes in UI or data storage affect only the outer layers, not the domain or use cases.\n\nDecoupled Code: The domain model and application rules remain unaffected by outside concerns (databases, APIs, UI frameworks).",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Clean architecture"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Clean-architecture.html#common-misconceptions",
    "href": "articles/Beginning-a-project/Clean-architecture.html#common-misconceptions",
    "title": "Clean architecture",
    "section": "",
    "text": "It’s Not Just Folder Structure: Clean Architecture is more about dependency flow than merely having “nice folders.” You can have well-labeled directories but still violate dependency rules.\n\nIt’s Not Just for Large Apps: Even smaller projects benefit from layered boundaries if they anticipate future growth or complexity.\n\nIt Doesn’t Require a Particular Tech Stack: Clean Architecture is language/framework-agnostic. Whether in C#, Java, Python, or JavaScript, the principles remain the same.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Clean architecture"
    ]
  },
  {
    "objectID": "articles/Beginning-a-project/Clean-architecture.html#conclusion",
    "href": "articles/Beginning-a-project/Clean-architecture.html#conclusion",
    "title": "Clean architecture",
    "section": "",
    "text": "Clean Architecture structures your application around the core business logic, shielding it from implementation details. By inverting dependencies, you minimize coupling and maximize the testability and flexibility of your system. This approach is particularly valuable in large, evolving projects where requirements, frameworks, and technologies may change over time, but the core business rules remain consistent and stable.",
    "crumbs": [
      "All articles",
      "Beginning a project",
      "Clean architecture"
    ]
  }
]